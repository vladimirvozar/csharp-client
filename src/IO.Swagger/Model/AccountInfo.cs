/* 
 * Nordea Account Information Services API v3
 *
 * Open Banking API
 *
 * OpenAPI spec version: 2.2.0-SNAPSHOT
 * Contact: support@nordeaopenbanking.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Basic account information
    /// </summary>
    [DataContract]
    public partial class AccountInfo :  IEquatable<AccountInfo>, IValidatableObject
    {
        /// <summary>
        /// Account type
        /// </summary>
        /// <value>Account type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountTypeEnum
        {
            
            /// <summary>
            /// Enum Current for value: Current
            /// </summary>
            [EnumMember(Value = "Current")]
            Current = 1
        }

        /// <summary>
        /// Account type
        /// </summary>
        /// <value>Account type</value>
        [DataMember(Name="account_type", EmitDefaultValue=false)]
        public AccountTypeEnum AccountType { get; set; }
        /// <summary>
        /// Country code where the account is held according to ISO ALPHA-2
        /// </summary>
        /// <value>Country code where the account is held according to ISO ALPHA-2</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CountryEnum
        {
            
            /// <summary>
            /// Enum FI for value: FI
            /// </summary>
            [EnumMember(Value = "FI")]
            FI = 1,
            
            /// <summary>
            /// Enum SE for value: SE
            /// </summary>
            [EnumMember(Value = "SE")]
            SE = 2,
            
            /// <summary>
            /// Enum DK for value: DK
            /// </summary>
            [EnumMember(Value = "DK")]
            DK = 3,
            
            /// <summary>
            /// Enum NO for value: NO
            /// </summary>
            [EnumMember(Value = "NO")]
            NO = 4,
            
            /// <summary>
            /// Enum DE for value: DE
            /// </summary>
            [EnumMember(Value = "DE")]
            DE = 5,
            
            /// <summary>
            /// Enum EE for value: EE
            /// </summary>
            [EnumMember(Value = "EE")]
            EE = 6,
            
            /// <summary>
            /// Enum LV for value: LV
            /// </summary>
            [EnumMember(Value = "LV")]
            LV = 7,
            
            /// <summary>
            /// Enum LT for value: LT
            /// </summary>
            [EnumMember(Value = "LT")]
            LT = 8,
            
            /// <summary>
            /// Enum PL for value: PL
            /// </summary>
            [EnumMember(Value = "PL")]
            PL = 9,
            
            /// <summary>
            /// Enum RU for value: RU
            /// </summary>
            [EnumMember(Value = "RU")]
            RU = 10,
            
            /// <summary>
            /// Enum LU for value: LU
            /// </summary>
            [EnumMember(Value = "LU")]
            LU = 11,
            
            /// <summary>
            /// Enum CH for value: CH
            /// </summary>
            [EnumMember(Value = "CH")]
            CH = 12,
            
            /// <summary>
            /// Enum US for value: US
            /// </summary>
            [EnumMember(Value = "US")]
            US = 13,
            
            /// <summary>
            /// Enum SG for value: SG
            /// </summary>
            [EnumMember(Value = "SG")]
            SG = 14,
            
            /// <summary>
            /// Enum GB for value: GB
            /// </summary>
            [EnumMember(Value = "GB")]
            GB = 15,
            
            /// <summary>
            /// Enum UK for value: UK
            /// </summary>
            [EnumMember(Value = "UK")]
            UK = 16
        }

        /// <summary>
        /// Country code where the account is held according to ISO ALPHA-2
        /// </summary>
        /// <value>Country code where the account is held according to ISO ALPHA-2</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public CountryEnum? Country { get; set; }
        /// <summary>
        /// Currency code according to ISO 4217
        /// </summary>
        /// <value>Currency code according to ISO 4217</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            
            /// <summary>
            /// Enum AED for value: AED
            /// </summary>
            [EnumMember(Value = "AED")]
            AED = 1,
            
            /// <summary>
            /// Enum AFN for value: AFN
            /// </summary>
            [EnumMember(Value = "AFN")]
            AFN = 2,
            
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 3,
            
            /// <summary>
            /// Enum AMD for value: AMD
            /// </summary>
            [EnumMember(Value = "AMD")]
            AMD = 4,
            
            /// <summary>
            /// Enum ANG for value: ANG
            /// </summary>
            [EnumMember(Value = "ANG")]
            ANG = 5,
            
            /// <summary>
            /// Enum AOA for value: AOA
            /// </summary>
            [EnumMember(Value = "AOA")]
            AOA = 6,
            
            /// <summary>
            /// Enum ARS for value: ARS
            /// </summary>
            [EnumMember(Value = "ARS")]
            ARS = 7,
            
            /// <summary>
            /// Enum AUD for value: AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD = 8,
            
            /// <summary>
            /// Enum AWG for value: AWG
            /// </summary>
            [EnumMember(Value = "AWG")]
            AWG = 9,
            
            /// <summary>
            /// Enum AZN for value: AZN
            /// </summary>
            [EnumMember(Value = "AZN")]
            AZN = 10,
            
            /// <summary>
            /// Enum BAM for value: BAM
            /// </summary>
            [EnumMember(Value = "BAM")]
            BAM = 11,
            
            /// <summary>
            /// Enum BBD for value: BBD
            /// </summary>
            [EnumMember(Value = "BBD")]
            BBD = 12,
            
            /// <summary>
            /// Enum BDT for value: BDT
            /// </summary>
            [EnumMember(Value = "BDT")]
            BDT = 13,
            
            /// <summary>
            /// Enum BGN for value: BGN
            /// </summary>
            [EnumMember(Value = "BGN")]
            BGN = 14,
            
            /// <summary>
            /// Enum BHD for value: BHD
            /// </summary>
            [EnumMember(Value = "BHD")]
            BHD = 15,
            
            /// <summary>
            /// Enum BIF for value: BIF
            /// </summary>
            [EnumMember(Value = "BIF")]
            BIF = 16,
            
            /// <summary>
            /// Enum BMD for value: BMD
            /// </summary>
            [EnumMember(Value = "BMD")]
            BMD = 17,
            
            /// <summary>
            /// Enum BND for value: BND
            /// </summary>
            [EnumMember(Value = "BND")]
            BND = 18,
            
            /// <summary>
            /// Enum BOB for value: BOB
            /// </summary>
            [EnumMember(Value = "BOB")]
            BOB = 19,
            
            /// <summary>
            /// Enum BOV for value: BOV
            /// </summary>
            [EnumMember(Value = "BOV")]
            BOV = 20,
            
            /// <summary>
            /// Enum BRL for value: BRL
            /// </summary>
            [EnumMember(Value = "BRL")]
            BRL = 21,
            
            /// <summary>
            /// Enum BSD for value: BSD
            /// </summary>
            [EnumMember(Value = "BSD")]
            BSD = 22,
            
            /// <summary>
            /// Enum BTN for value: BTN
            /// </summary>
            [EnumMember(Value = "BTN")]
            BTN = 23,
            
            /// <summary>
            /// Enum BWP for value: BWP
            /// </summary>
            [EnumMember(Value = "BWP")]
            BWP = 24,
            
            /// <summary>
            /// Enum BYN for value: BYN
            /// </summary>
            [EnumMember(Value = "BYN")]
            BYN = 25,
            
            /// <summary>
            /// Enum BYR for value: BYR
            /// </summary>
            [EnumMember(Value = "BYR")]
            BYR = 26,
            
            /// <summary>
            /// Enum BZD for value: BZD
            /// </summary>
            [EnumMember(Value = "BZD")]
            BZD = 27,
            
            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 28,
            
            /// <summary>
            /// Enum CDF for value: CDF
            /// </summary>
            [EnumMember(Value = "CDF")]
            CDF = 29,
            
            /// <summary>
            /// Enum CHE for value: CHE
            /// </summary>
            [EnumMember(Value = "CHE")]
            CHE = 30,
            
            /// <summary>
            /// Enum CHF for value: CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF = 31,
            
            /// <summary>
            /// Enum CHW for value: CHW
            /// </summary>
            [EnumMember(Value = "CHW")]
            CHW = 32,
            
            /// <summary>
            /// Enum CLF for value: CLF
            /// </summary>
            [EnumMember(Value = "CLF")]
            CLF = 33,
            
            /// <summary>
            /// Enum CLP for value: CLP
            /// </summary>
            [EnumMember(Value = "CLP")]
            CLP = 34,
            
            /// <summary>
            /// Enum CNY for value: CNY
            /// </summary>
            [EnumMember(Value = "CNY")]
            CNY = 35,
            
            /// <summary>
            /// Enum COP for value: COP
            /// </summary>
            [EnumMember(Value = "COP")]
            COP = 36,
            
            /// <summary>
            /// Enum COU for value: COU
            /// </summary>
            [EnumMember(Value = "COU")]
            COU = 37,
            
            /// <summary>
            /// Enum CRC for value: CRC
            /// </summary>
            [EnumMember(Value = "CRC")]
            CRC = 38,
            
            /// <summary>
            /// Enum CUC for value: CUC
            /// </summary>
            [EnumMember(Value = "CUC")]
            CUC = 39,
            
            /// <summary>
            /// Enum CUP for value: CUP
            /// </summary>
            [EnumMember(Value = "CUP")]
            CUP = 40,
            
            /// <summary>
            /// Enum CVE for value: CVE
            /// </summary>
            [EnumMember(Value = "CVE")]
            CVE = 41,
            
            /// <summary>
            /// Enum CZK for value: CZK
            /// </summary>
            [EnumMember(Value = "CZK")]
            CZK = 42,
            
            /// <summary>
            /// Enum DJF for value: DJF
            /// </summary>
            [EnumMember(Value = "DJF")]
            DJF = 43,
            
            /// <summary>
            /// Enum DKK for value: DKK
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKK = 44,
            
            /// <summary>
            /// Enum DOP for value: DOP
            /// </summary>
            [EnumMember(Value = "DOP")]
            DOP = 45,
            
            /// <summary>
            /// Enum DZD for value: DZD
            /// </summary>
            [EnumMember(Value = "DZD")]
            DZD = 46,
            
            /// <summary>
            /// Enum EGP for value: EGP
            /// </summary>
            [EnumMember(Value = "EGP")]
            EGP = 47,
            
            /// <summary>
            /// Enum ERN for value: ERN
            /// </summary>
            [EnumMember(Value = "ERN")]
            ERN = 48,
            
            /// <summary>
            /// Enum ETB for value: ETB
            /// </summary>
            [EnumMember(Value = "ETB")]
            ETB = 49,
            
            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 50,
            
            /// <summary>
            /// Enum FJD for value: FJD
            /// </summary>
            [EnumMember(Value = "FJD")]
            FJD = 51,
            
            /// <summary>
            /// Enum FKP for value: FKP
            /// </summary>
            [EnumMember(Value = "FKP")]
            FKP = 52,
            
            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 53,
            
            /// <summary>
            /// Enum GEL for value: GEL
            /// </summary>
            [EnumMember(Value = "GEL")]
            GEL = 54,
            
            /// <summary>
            /// Enum GHS for value: GHS
            /// </summary>
            [EnumMember(Value = "GHS")]
            GHS = 55,
            
            /// <summary>
            /// Enum GIP for value: GIP
            /// </summary>
            [EnumMember(Value = "GIP")]
            GIP = 56,
            
            /// <summary>
            /// Enum GMD for value: GMD
            /// </summary>
            [EnumMember(Value = "GMD")]
            GMD = 57,
            
            /// <summary>
            /// Enum GNF for value: GNF
            /// </summary>
            [EnumMember(Value = "GNF")]
            GNF = 58,
            
            /// <summary>
            /// Enum GTQ for value: GTQ
            /// </summary>
            [EnumMember(Value = "GTQ")]
            GTQ = 59,
            
            /// <summary>
            /// Enum GYD for value: GYD
            /// </summary>
            [EnumMember(Value = "GYD")]
            GYD = 60,
            
            /// <summary>
            /// Enum HKD for value: HKD
            /// </summary>
            [EnumMember(Value = "HKD")]
            HKD = 61,
            
            /// <summary>
            /// Enum HNL for value: HNL
            /// </summary>
            [EnumMember(Value = "HNL")]
            HNL = 62,
            
            /// <summary>
            /// Enum HRK for value: HRK
            /// </summary>
            [EnumMember(Value = "HRK")]
            HRK = 63,
            
            /// <summary>
            /// Enum HTG for value: HTG
            /// </summary>
            [EnumMember(Value = "HTG")]
            HTG = 64,
            
            /// <summary>
            /// Enum HUF for value: HUF
            /// </summary>
            [EnumMember(Value = "HUF")]
            HUF = 65,
            
            /// <summary>
            /// Enum IDR for value: IDR
            /// </summary>
            [EnumMember(Value = "IDR")]
            IDR = 66,
            
            /// <summary>
            /// Enum ILS for value: ILS
            /// </summary>
            [EnumMember(Value = "ILS")]
            ILS = 67,
            
            /// <summary>
            /// Enum INR for value: INR
            /// </summary>
            [EnumMember(Value = "INR")]
            INR = 68,
            
            /// <summary>
            /// Enum IQD for value: IQD
            /// </summary>
            [EnumMember(Value = "IQD")]
            IQD = 69,
            
            /// <summary>
            /// Enum IRR for value: IRR
            /// </summary>
            [EnumMember(Value = "IRR")]
            IRR = 70,
            
            /// <summary>
            /// Enum ISK for value: ISK
            /// </summary>
            [EnumMember(Value = "ISK")]
            ISK = 71,
            
            /// <summary>
            /// Enum JMD for value: JMD
            /// </summary>
            [EnumMember(Value = "JMD")]
            JMD = 72,
            
            /// <summary>
            /// Enum JOD for value: JOD
            /// </summary>
            [EnumMember(Value = "JOD")]
            JOD = 73,
            
            /// <summary>
            /// Enum JPY for value: JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY = 74,
            
            /// <summary>
            /// Enum KES for value: KES
            /// </summary>
            [EnumMember(Value = "KES")]
            KES = 75,
            
            /// <summary>
            /// Enum KGS for value: KGS
            /// </summary>
            [EnumMember(Value = "KGS")]
            KGS = 76,
            
            /// <summary>
            /// Enum KHR for value: KHR
            /// </summary>
            [EnumMember(Value = "KHR")]
            KHR = 77,
            
            /// <summary>
            /// Enum KMF for value: KMF
            /// </summary>
            [EnumMember(Value = "KMF")]
            KMF = 78,
            
            /// <summary>
            /// Enum KPW for value: KPW
            /// </summary>
            [EnumMember(Value = "KPW")]
            KPW = 79,
            
            /// <summary>
            /// Enum KRW for value: KRW
            /// </summary>
            [EnumMember(Value = "KRW")]
            KRW = 80,
            
            /// <summary>
            /// Enum KWD for value: KWD
            /// </summary>
            [EnumMember(Value = "KWD")]
            KWD = 81,
            
            /// <summary>
            /// Enum KYD for value: KYD
            /// </summary>
            [EnumMember(Value = "KYD")]
            KYD = 82,
            
            /// <summary>
            /// Enum KZT for value: KZT
            /// </summary>
            [EnumMember(Value = "KZT")]
            KZT = 83,
            
            /// <summary>
            /// Enum LAK for value: LAK
            /// </summary>
            [EnumMember(Value = "LAK")]
            LAK = 84,
            
            /// <summary>
            /// Enum LBP for value: LBP
            /// </summary>
            [EnumMember(Value = "LBP")]
            LBP = 85,
            
            /// <summary>
            /// Enum LKR for value: LKR
            /// </summary>
            [EnumMember(Value = "LKR")]
            LKR = 86,
            
            /// <summary>
            /// Enum LRD for value: LRD
            /// </summary>
            [EnumMember(Value = "LRD")]
            LRD = 87,
            
            /// <summary>
            /// Enum LSL for value: LSL
            /// </summary>
            [EnumMember(Value = "LSL")]
            LSL = 88,
            
            /// <summary>
            /// Enum LYD for value: LYD
            /// </summary>
            [EnumMember(Value = "LYD")]
            LYD = 89,
            
            /// <summary>
            /// Enum MAD for value: MAD
            /// </summary>
            [EnumMember(Value = "MAD")]
            MAD = 90,
            
            /// <summary>
            /// Enum MDL for value: MDL
            /// </summary>
            [EnumMember(Value = "MDL")]
            MDL = 91,
            
            /// <summary>
            /// Enum MGA for value: MGA
            /// </summary>
            [EnumMember(Value = "MGA")]
            MGA = 92,
            
            /// <summary>
            /// Enum MKD for value: MKD
            /// </summary>
            [EnumMember(Value = "MKD")]
            MKD = 93,
            
            /// <summary>
            /// Enum MMK for value: MMK
            /// </summary>
            [EnumMember(Value = "MMK")]
            MMK = 94,
            
            /// <summary>
            /// Enum MNT for value: MNT
            /// </summary>
            [EnumMember(Value = "MNT")]
            MNT = 95,
            
            /// <summary>
            /// Enum MOP for value: MOP
            /// </summary>
            [EnumMember(Value = "MOP")]
            MOP = 96,
            
            /// <summary>
            /// Enum MRO for value: MRO
            /// </summary>
            [EnumMember(Value = "MRO")]
            MRO = 97,
            
            /// <summary>
            /// Enum MUR for value: MUR
            /// </summary>
            [EnumMember(Value = "MUR")]
            MUR = 98,
            
            /// <summary>
            /// Enum MVR for value: MVR
            /// </summary>
            [EnumMember(Value = "MVR")]
            MVR = 99,
            
            /// <summary>
            /// Enum MWK for value: MWK
            /// </summary>
            [EnumMember(Value = "MWK")]
            MWK = 100,
            
            /// <summary>
            /// Enum MXN for value: MXN
            /// </summary>
            [EnumMember(Value = "MXN")]
            MXN = 101,
            
            /// <summary>
            /// Enum MXV for value: MXV
            /// </summary>
            [EnumMember(Value = "MXV")]
            MXV = 102,
            
            /// <summary>
            /// Enum MYR for value: MYR
            /// </summary>
            [EnumMember(Value = "MYR")]
            MYR = 103,
            
            /// <summary>
            /// Enum MZN for value: MZN
            /// </summary>
            [EnumMember(Value = "MZN")]
            MZN = 104,
            
            /// <summary>
            /// Enum NAD for value: NAD
            /// </summary>
            [EnumMember(Value = "NAD")]
            NAD = 105,
            
            /// <summary>
            /// Enum NGN for value: NGN
            /// </summary>
            [EnumMember(Value = "NGN")]
            NGN = 106,
            
            /// <summary>
            /// Enum NIO for value: NIO
            /// </summary>
            [EnumMember(Value = "NIO")]
            NIO = 107,
            
            /// <summary>
            /// Enum NOK for value: NOK
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOK = 108,
            
            /// <summary>
            /// Enum NPR for value: NPR
            /// </summary>
            [EnumMember(Value = "NPR")]
            NPR = 109,
            
            /// <summary>
            /// Enum NZD for value: NZD
            /// </summary>
            [EnumMember(Value = "NZD")]
            NZD = 110,
            
            /// <summary>
            /// Enum OMR for value: OMR
            /// </summary>
            [EnumMember(Value = "OMR")]
            OMR = 111,
            
            /// <summary>
            /// Enum PAB for value: PAB
            /// </summary>
            [EnumMember(Value = "PAB")]
            PAB = 112,
            
            /// <summary>
            /// Enum PEN for value: PEN
            /// </summary>
            [EnumMember(Value = "PEN")]
            PEN = 113,
            
            /// <summary>
            /// Enum PGK for value: PGK
            /// </summary>
            [EnumMember(Value = "PGK")]
            PGK = 114,
            
            /// <summary>
            /// Enum PHP for value: PHP
            /// </summary>
            [EnumMember(Value = "PHP")]
            PHP = 115,
            
            /// <summary>
            /// Enum PKR for value: PKR
            /// </summary>
            [EnumMember(Value = "PKR")]
            PKR = 116,
            
            /// <summary>
            /// Enum PLN for value: PLN
            /// </summary>
            [EnumMember(Value = "PLN")]
            PLN = 117,
            
            /// <summary>
            /// Enum PYG for value: PYG
            /// </summary>
            [EnumMember(Value = "PYG")]
            PYG = 118,
            
            /// <summary>
            /// Enum QAR for value: QAR
            /// </summary>
            [EnumMember(Value = "QAR")]
            QAR = 119,
            
            /// <summary>
            /// Enum RON for value: RON
            /// </summary>
            [EnumMember(Value = "RON")]
            RON = 120,
            
            /// <summary>
            /// Enum RSD for value: RSD
            /// </summary>
            [EnumMember(Value = "RSD")]
            RSD = 121,
            
            /// <summary>
            /// Enum RUB for value: RUB
            /// </summary>
            [EnumMember(Value = "RUB")]
            RUB = 122,
            
            /// <summary>
            /// Enum RWF for value: RWF
            /// </summary>
            [EnumMember(Value = "RWF")]
            RWF = 123,
            
            /// <summary>
            /// Enum SAR for value: SAR
            /// </summary>
            [EnumMember(Value = "SAR")]
            SAR = 124,
            
            /// <summary>
            /// Enum SBD for value: SBD
            /// </summary>
            [EnumMember(Value = "SBD")]
            SBD = 125,
            
            /// <summary>
            /// Enum SCR for value: SCR
            /// </summary>
            [EnumMember(Value = "SCR")]
            SCR = 126,
            
            /// <summary>
            /// Enum SDG for value: SDG
            /// </summary>
            [EnumMember(Value = "SDG")]
            SDG = 127,
            
            /// <summary>
            /// Enum SEK for value: SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEK = 128,
            
            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 129,
            
            /// <summary>
            /// Enum SHP for value: SHP
            /// </summary>
            [EnumMember(Value = "SHP")]
            SHP = 130,
            
            /// <summary>
            /// Enum SLL for value: SLL
            /// </summary>
            [EnumMember(Value = "SLL")]
            SLL = 131,
            
            /// <summary>
            /// Enum SOS for value: SOS
            /// </summary>
            [EnumMember(Value = "SOS")]
            SOS = 132,
            
            /// <summary>
            /// Enum SRD for value: SRD
            /// </summary>
            [EnumMember(Value = "SRD")]
            SRD = 133,
            
            /// <summary>
            /// Enum SSP for value: SSP
            /// </summary>
            [EnumMember(Value = "SSP")]
            SSP = 134,
            
            /// <summary>
            /// Enum STD for value: STD
            /// </summary>
            [EnumMember(Value = "STD")]
            STD = 135,
            
            /// <summary>
            /// Enum SVC for value: SVC
            /// </summary>
            [EnumMember(Value = "SVC")]
            SVC = 136,
            
            /// <summary>
            /// Enum SYP for value: SYP
            /// </summary>
            [EnumMember(Value = "SYP")]
            SYP = 137,
            
            /// <summary>
            /// Enum SZL for value: SZL
            /// </summary>
            [EnumMember(Value = "SZL")]
            SZL = 138,
            
            /// <summary>
            /// Enum THB for value: THB
            /// </summary>
            [EnumMember(Value = "THB")]
            THB = 139,
            
            /// <summary>
            /// Enum TJS for value: TJS
            /// </summary>
            [EnumMember(Value = "TJS")]
            TJS = 140,
            
            /// <summary>
            /// Enum TMT for value: TMT
            /// </summary>
            [EnumMember(Value = "TMT")]
            TMT = 141,
            
            /// <summary>
            /// Enum TND for value: TND
            /// </summary>
            [EnumMember(Value = "TND")]
            TND = 142,
            
            /// <summary>
            /// Enum TOP for value: TOP
            /// </summary>
            [EnumMember(Value = "TOP")]
            TOP = 143,
            
            /// <summary>
            /// Enum TRY for value: TRY
            /// </summary>
            [EnumMember(Value = "TRY")]
            TRY = 144,
            
            /// <summary>
            /// Enum TTD for value: TTD
            /// </summary>
            [EnumMember(Value = "TTD")]
            TTD = 145,
            
            /// <summary>
            /// Enum TWD for value: TWD
            /// </summary>
            [EnumMember(Value = "TWD")]
            TWD = 146,
            
            /// <summary>
            /// Enum TZS for value: TZS
            /// </summary>
            [EnumMember(Value = "TZS")]
            TZS = 147,
            
            /// <summary>
            /// Enum UAH for value: UAH
            /// </summary>
            [EnumMember(Value = "UAH")]
            UAH = 148,
            
            /// <summary>
            /// Enum UGX for value: UGX
            /// </summary>
            [EnumMember(Value = "UGX")]
            UGX = 149,
            
            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 150,
            
            /// <summary>
            /// Enum USN for value: USN
            /// </summary>
            [EnumMember(Value = "USN")]
            USN = 151,
            
            /// <summary>
            /// Enum UYI for value: UYI
            /// </summary>
            [EnumMember(Value = "UYI")]
            UYI = 152,
            
            /// <summary>
            /// Enum UYU for value: UYU
            /// </summary>
            [EnumMember(Value = "UYU")]
            UYU = 153,
            
            /// <summary>
            /// Enum UZS for value: UZS
            /// </summary>
            [EnumMember(Value = "UZS")]
            UZS = 154,
            
            /// <summary>
            /// Enum VEF for value: VEF
            /// </summary>
            [EnumMember(Value = "VEF")]
            VEF = 155,
            
            /// <summary>
            /// Enum VND for value: VND
            /// </summary>
            [EnumMember(Value = "VND")]
            VND = 156,
            
            /// <summary>
            /// Enum VUV for value: VUV
            /// </summary>
            [EnumMember(Value = "VUV")]
            VUV = 157,
            
            /// <summary>
            /// Enum WST for value: WST
            /// </summary>
            [EnumMember(Value = "WST")]
            WST = 158,
            
            /// <summary>
            /// Enum XAF for value: XAF
            /// </summary>
            [EnumMember(Value = "XAF")]
            XAF = 159,
            
            /// <summary>
            /// Enum XAG for value: XAG
            /// </summary>
            [EnumMember(Value = "XAG")]
            XAG = 160,
            
            /// <summary>
            /// Enum XAU for value: XAU
            /// </summary>
            [EnumMember(Value = "XAU")]
            XAU = 161,
            
            /// <summary>
            /// Enum XBA for value: XBA
            /// </summary>
            [EnumMember(Value = "XBA")]
            XBA = 162,
            
            /// <summary>
            /// Enum XBB for value: XBB
            /// </summary>
            [EnumMember(Value = "XBB")]
            XBB = 163,
            
            /// <summary>
            /// Enum XBC for value: XBC
            /// </summary>
            [EnumMember(Value = "XBC")]
            XBC = 164,
            
            /// <summary>
            /// Enum XBD for value: XBD
            /// </summary>
            [EnumMember(Value = "XBD")]
            XBD = 165,
            
            /// <summary>
            /// Enum XCD for value: XCD
            /// </summary>
            [EnumMember(Value = "XCD")]
            XCD = 166,
            
            /// <summary>
            /// Enum XDR for value: XDR
            /// </summary>
            [EnumMember(Value = "XDR")]
            XDR = 167,
            
            /// <summary>
            /// Enum XOF for value: XOF
            /// </summary>
            [EnumMember(Value = "XOF")]
            XOF = 168,
            
            /// <summary>
            /// Enum XPD for value: XPD
            /// </summary>
            [EnumMember(Value = "XPD")]
            XPD = 169,
            
            /// <summary>
            /// Enum XPF for value: XPF
            /// </summary>
            [EnumMember(Value = "XPF")]
            XPF = 170,
            
            /// <summary>
            /// Enum XPT for value: XPT
            /// </summary>
            [EnumMember(Value = "XPT")]
            XPT = 171,
            
            /// <summary>
            /// Enum XSU for value: XSU
            /// </summary>
            [EnumMember(Value = "XSU")]
            XSU = 172,
            
            /// <summary>
            /// Enum XTS for value: XTS
            /// </summary>
            [EnumMember(Value = "XTS")]
            XTS = 173,
            
            /// <summary>
            /// Enum XUA for value: XUA
            /// </summary>
            [EnumMember(Value = "XUA")]
            XUA = 174,
            
            /// <summary>
            /// Enum XXX for value: XXX
            /// </summary>
            [EnumMember(Value = "XXX")]
            XXX = 175,
            
            /// <summary>
            /// Enum YER for value: YER
            /// </summary>
            [EnumMember(Value = "YER")]
            YER = 176,
            
            /// <summary>
            /// Enum ZAR for value: ZAR
            /// </summary>
            [EnumMember(Value = "ZAR")]
            ZAR = 177,
            
            /// <summary>
            /// Enum ZMW for value: ZMW
            /// </summary>
            [EnumMember(Value = "ZMW")]
            ZMW = 178,
            
            /// <summary>
            /// Enum ZWL for value: ZWL
            /// </summary>
            [EnumMember(Value = "ZWL")]
            ZWL = 179
        }

        /// <summary>
        /// Currency code according to ISO 4217
        /// </summary>
        /// <value>Currency code according to ISO 4217</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public CurrencyEnum Currency { get; set; }
        /// <summary>
        /// Status of account
        /// </summary>
        /// <value>Status of account</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum OPEN for value: OPEN
            /// </summary>
            [EnumMember(Value = "OPEN")]
            OPEN = 1,
            
            /// <summary>
            /// Enum CLOSED for value: CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED = 2
        }

        /// <summary>
        /// Status of account
        /// </summary>
        /// <value>Status of account</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountInfo" /> class.
        /// </summary>
        /// <param name="id">Internal, technical account identifier (required).</param>
        /// <param name="links">HATEOAS inspired links.</param>
        /// <param name="accountName">Account name (required).</param>
        /// <param name="accountNumbers">Account numbers (required).</param>
        /// <param name="accountType">Account type (required).</param>
        /// <param name="availableBalance">Available balance indicates the funds which are available to the account holder at the time of the query (required).</param>
        /// <param name="bank">Details of bank servicing account (required).</param>
        /// <param name="bookedBalance">Booked balance includes all transactions entered on the account at the time of the query (required).</param>
        /// <param name="country">Country code where the account is held according to ISO ALPHA-2.</param>
        /// <param name="creditLimit">Amount of credit extended to account holder beyond account booked balance.</param>
        /// <param name="currency">Currency code according to ISO 4217 (required).</param>
        /// <param name="latestTransactionBookingDate">Date of last transaction booked to the account.</param>
        /// <param name="product">Name of the banking product delivered by this account (required).</param>
        /// <param name="status">Status of account (required).</param>
        /// <param name="valueDatedBalance">Value dated balance is the balance on the basis of which interest is calculated on the account.</param>
        public AccountInfo(string id = default(string), List<Link> links = default(List<Link>), string accountName = default(string), List<AccountNumber> accountNumbers = default(List<AccountNumber>), AccountTypeEnum accountType = default(AccountTypeEnum), decimal? availableBalance = default(decimal?), BankInfo bank = default(BankInfo), decimal? bookedBalance = default(decimal?), CountryEnum? country = default(CountryEnum?), decimal? creditLimit = default(decimal?), CurrencyEnum currency = default(CurrencyEnum), DateTime? latestTransactionBookingDate = default(DateTime?), string product = default(string), StatusEnum status = default(StatusEnum), decimal? valueDatedBalance = default(decimal?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "accountName" is required (not null)
            if (accountName == null)
            {
                throw new InvalidDataException("accountName is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.AccountName = accountName;
            }
            // to ensure "accountNumbers" is required (not null)
            if (accountNumbers == null)
            {
                throw new InvalidDataException("accountNumbers is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.AccountNumbers = accountNumbers;
            }
            // to ensure "accountType" is required (not null)
            if (accountType == null)
            {
                throw new InvalidDataException("accountType is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.AccountType = accountType;
            }
            // to ensure "availableBalance" is required (not null)
            if (availableBalance == null)
            {
                throw new InvalidDataException("availableBalance is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.AvailableBalance = availableBalance;
            }
            // to ensure "bank" is required (not null)
            if (bank == null)
            {
                throw new InvalidDataException("bank is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.Bank = bank;
            }
            // to ensure "bookedBalance" is required (not null)
            if (bookedBalance == null)
            {
                throw new InvalidDataException("bookedBalance is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.BookedBalance = bookedBalance;
            }
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new InvalidDataException("currency is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.Currency = currency;
            }
            // to ensure "product" is required (not null)
            if (product == null)
            {
                throw new InvalidDataException("product is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.Product = product;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.Links = links;
            this.Country = country;
            this.CreditLimit = creditLimit;
            this.LatestTransactionBookingDate = latestTransactionBookingDate;
            this.ValueDatedBalance = valueDatedBalance;
        }
        
        /// <summary>
        /// Internal, technical account identifier
        /// </summary>
        /// <value>Internal, technical account identifier</value>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// HATEOAS inspired links
        /// </summary>
        /// <value>HATEOAS inspired links</value>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Account name
        /// </summary>
        /// <value>Account name</value>
        [DataMember(Name="account_name", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Account numbers
        /// </summary>
        /// <value>Account numbers</value>
        [DataMember(Name="account_numbers", EmitDefaultValue=false)]
        public List<AccountNumber> AccountNumbers { get; set; }


        /// <summary>
        /// Available balance indicates the funds which are available to the account holder at the time of the query
        /// </summary>
        /// <value>Available balance indicates the funds which are available to the account holder at the time of the query</value>
        [DataMember(Name="available_balance", EmitDefaultValue=false)]
        public decimal? AvailableBalance { get; set; }

        /// <summary>
        /// Details of bank servicing account
        /// </summary>
        /// <value>Details of bank servicing account</value>
        [DataMember(Name="bank", EmitDefaultValue=false)]
        public BankInfo Bank { get; set; }

        /// <summary>
        /// Booked balance includes all transactions entered on the account at the time of the query
        /// </summary>
        /// <value>Booked balance includes all transactions entered on the account at the time of the query</value>
        [DataMember(Name="booked_balance", EmitDefaultValue=false)]
        public decimal? BookedBalance { get; set; }


        /// <summary>
        /// Amount of credit extended to account holder beyond account booked balance
        /// </summary>
        /// <value>Amount of credit extended to account holder beyond account booked balance</value>
        [DataMember(Name="credit_limit", EmitDefaultValue=false)]
        public decimal? CreditLimit { get; set; }


        /// <summary>
        /// Date of last transaction booked to the account
        /// </summary>
        /// <value>Date of last transaction booked to the account</value>
        [DataMember(Name="latest_transaction_booking_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? LatestTransactionBookingDate { get; set; }

        /// <summary>
        /// Name of the banking product delivered by this account
        /// </summary>
        /// <value>Name of the banking product delivered by this account</value>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public string Product { get; set; }


        /// <summary>
        /// Value dated balance is the balance on the basis of which interest is calculated on the account
        /// </summary>
        /// <value>Value dated balance is the balance on the basis of which interest is calculated on the account</value>
        [DataMember(Name="value_dated_balance", EmitDefaultValue=false)]
        public decimal? ValueDatedBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountNumbers: ").Append(AccountNumbers).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AvailableBalance: ").Append(AvailableBalance).Append("\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("  BookedBalance: ").Append(BookedBalance).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CreditLimit: ").Append(CreditLimit).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  LatestTransactionBookingDate: ").Append(LatestTransactionBookingDate).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ValueDatedBalance: ").Append(ValueDatedBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountInfo);
        }

        /// <summary>
        /// Returns true if AccountInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.AccountNumbers == input.AccountNumbers ||
                    this.AccountNumbers != null &&
                    this.AccountNumbers.SequenceEqual(input.AccountNumbers)
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.AvailableBalance == input.AvailableBalance ||
                    (this.AvailableBalance != null &&
                    this.AvailableBalance.Equals(input.AvailableBalance))
                ) && 
                (
                    this.Bank == input.Bank ||
                    (this.Bank != null &&
                    this.Bank.Equals(input.Bank))
                ) && 
                (
                    this.BookedBalance == input.BookedBalance ||
                    (this.BookedBalance != null &&
                    this.BookedBalance.Equals(input.BookedBalance))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CreditLimit == input.CreditLimit ||
                    (this.CreditLimit != null &&
                    this.CreditLimit.Equals(input.CreditLimit))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.LatestTransactionBookingDate == input.LatestTransactionBookingDate ||
                    (this.LatestTransactionBookingDate != null &&
                    this.LatestTransactionBookingDate.Equals(input.LatestTransactionBookingDate))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ValueDatedBalance == input.ValueDatedBalance ||
                    (this.ValueDatedBalance != null &&
                    this.ValueDatedBalance.Equals(input.ValueDatedBalance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.AccountNumbers != null)
                    hashCode = hashCode * 59 + this.AccountNumbers.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.AvailableBalance != null)
                    hashCode = hashCode * 59 + this.AvailableBalance.GetHashCode();
                if (this.Bank != null)
                    hashCode = hashCode * 59 + this.Bank.GetHashCode();
                if (this.BookedBalance != null)
                    hashCode = hashCode * 59 + this.BookedBalance.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.CreditLimit != null)
                    hashCode = hashCode * 59 + this.CreditLimit.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.LatestTransactionBookingDate != null)
                    hashCode = hashCode * 59 + this.LatestTransactionBookingDate.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ValueDatedBalance != null)
                    hashCode = hashCode * 59 + this.ValueDatedBalance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Nordea Account Information Services API v3
 *
 * Open Banking API
 *
 * OpenAPI spec version: 2.2.0-SNAPSHOT
 * Contact: support@nordeaopenbanking.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// List of transactions
    /// </summary>
    [DataContract]
    public partial class TransactionList :  IEquatable<TransactionList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionList" /> class.
        /// </summary>
        /// <param name="links">HATEOAS inspired links.</param>
        /// <param name="continuationKey">Resource listing may return a continuationKey if there&#39;s more results available. Request may be retried with the continuationKey, but otherwise same parameters, in order to get more results..</param>
        /// <param name="transactions">Listed transactions.</param>
        public TransactionList(List<Link> links = default(List<Link>), string continuationKey = default(string), List<Transaction> transactions = default(List<Transaction>))
        {
            this.Links = links;
            this.ContinuationKey = continuationKey;
            this.Transactions = transactions;
        }
        
        /// <summary>
        /// HATEOAS inspired links
        /// </summary>
        /// <value>HATEOAS inspired links</value>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Resource listing may return a continuationKey if there&#39;s more results available. Request may be retried with the continuationKey, but otherwise same parameters, in order to get more results.
        /// </summary>
        /// <value>Resource listing may return a continuationKey if there&#39;s more results available. Request may be retried with the continuationKey, but otherwise same parameters, in order to get more results.</value>
        [DataMember(Name="continuation_key", EmitDefaultValue=false)]
        public string ContinuationKey { get; set; }

        /// <summary>
        /// Listed transactions
        /// </summary>
        /// <value>Listed transactions</value>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public List<Transaction> Transactions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionList {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  ContinuationKey: ").Append(ContinuationKey).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionList);
        }

        /// <summary>
        /// Returns true if TransactionList instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.ContinuationKey == input.ContinuationKey ||
                    (this.ContinuationKey != null &&
                    this.ContinuationKey.Equals(input.ContinuationKey))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.ContinuationKey != null)
                    hashCode = hashCode * 59 + this.ContinuationKey.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Nordea Account Information Services API v3
 *
 * Open Banking API
 *
 * OpenAPI spec version: 2.2.0-SNAPSHOT
 * Contact: support@nordeaopenbanking.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Bank information
    /// </summary>
    [DataContract]
    public partial class BankInfo :  IEquatable<BankInfo>, IValidatableObject
    {
        /// <summary>
        /// Business Identifier Code of account servicing institution according to ISO 9362.
        /// </summary>
        /// <value>Business Identifier Code of account servicing institution according to ISO 9362.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BicEnum
        {
            
            /// <summary>
            /// Enum NDEAFIHH for value: NDEAFIHH
            /// </summary>
            [EnumMember(Value = "NDEAFIHH")]
            NDEAFIHH = 1,
            
            /// <summary>
            /// Enum NDEASESS for value: NDEASESS
            /// </summary>
            [EnumMember(Value = "NDEASESS")]
            NDEASESS = 2,
            
            /// <summary>
            /// Enum NDEADKKK for value: NDEADKKK
            /// </summary>
            [EnumMember(Value = "NDEADKKK")]
            NDEADKKK = 3,
            
            /// <summary>
            /// Enum NDEANOKK for value: NDEANOKK
            /// </summary>
            [EnumMember(Value = "NDEANOKK")]
            NDEANOKK = 4,
            
            /// <summary>
            /// Enum NDEAEE2X for value: NDEAEE2X
            /// </summary>
            [EnumMember(Value = "NDEAEE2X")]
            NDEAEE2X = 5,
            
            /// <summary>
            /// Enum NDEALV2X for value: NDEALV2X
            /// </summary>
            [EnumMember(Value = "NDEALV2X")]
            NDEALV2X = 6,
            
            /// <summary>
            /// Enum NDEALT2X for value: NDEALT2X
            /// </summary>
            [EnumMember(Value = "NDEALT2X")]
            NDEALT2X = 7,
            
            /// <summary>
            /// Enum NDEAPLP2 for value: NDEAPLP2
            /// </summary>
            [EnumMember(Value = "NDEAPLP2")]
            NDEAPLP2 = 8,
            
            /// <summary>
            /// Enum NDEARUMM for value: NDEARUMM
            /// </summary>
            [EnumMember(Value = "NDEARUMM")]
            NDEARUMM = 9,
            
            /// <summary>
            /// Enum NDEALULL for value: NDEALULL
            /// </summary>
            [EnumMember(Value = "NDEALULL")]
            NDEALULL = 10,
            
            /// <summary>
            /// Enum NDEADEFF for value: NDEADEFF
            /// </summary>
            [EnumMember(Value = "NDEADEFF")]
            NDEADEFF = 11,
            
            /// <summary>
            /// Enum NDEAGB2L for value: NDEAGB2L
            /// </summary>
            [EnumMember(Value = "NDEAGB2L")]
            NDEAGB2L = 12,
            
            /// <summary>
            /// Enum NDEACHZZ for value: NDEACHZZ
            /// </summary>
            [EnumMember(Value = "NDEACHZZ")]
            NDEACHZZ = 13,
            
            /// <summary>
            /// Enum NDEAUS3N for value: NDEAUS3N
            /// </summary>
            [EnumMember(Value = "NDEAUS3N")]
            NDEAUS3N = 14,
            
            /// <summary>
            /// Enum NDPBSGSG for value: NDPBSGSG
            /// </summary>
            [EnumMember(Value = "NDPBSGSG")]
            NDPBSGSG = 15
        }

        /// <summary>
        /// Business Identifier Code of account servicing institution according to ISO 9362.
        /// </summary>
        /// <value>Business Identifier Code of account servicing institution according to ISO 9362.</value>
        [DataMember(Name="bic", EmitDefaultValue=false)]
        public BicEnum Bic { get; set; }
        /// <summary>
        /// Country code according to ISO Alpha-2
        /// </summary>
        /// <value>Country code according to ISO Alpha-2</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CountryEnum
        {
            
            /// <summary>
            /// Enum FI for value: FI
            /// </summary>
            [EnumMember(Value = "FI")]
            FI = 1,
            
            /// <summary>
            /// Enum SE for value: SE
            /// </summary>
            [EnumMember(Value = "SE")]
            SE = 2,
            
            /// <summary>
            /// Enum DK for value: DK
            /// </summary>
            [EnumMember(Value = "DK")]
            DK = 3,
            
            /// <summary>
            /// Enum NO for value: NO
            /// </summary>
            [EnumMember(Value = "NO")]
            NO = 4,
            
            /// <summary>
            /// Enum DE for value: DE
            /// </summary>
            [EnumMember(Value = "DE")]
            DE = 5,
            
            /// <summary>
            /// Enum EE for value: EE
            /// </summary>
            [EnumMember(Value = "EE")]
            EE = 6,
            
            /// <summary>
            /// Enum LV for value: LV
            /// </summary>
            [EnumMember(Value = "LV")]
            LV = 7,
            
            /// <summary>
            /// Enum LT for value: LT
            /// </summary>
            [EnumMember(Value = "LT")]
            LT = 8,
            
            /// <summary>
            /// Enum PL for value: PL
            /// </summary>
            [EnumMember(Value = "PL")]
            PL = 9,
            
            /// <summary>
            /// Enum RU for value: RU
            /// </summary>
            [EnumMember(Value = "RU")]
            RU = 10,
            
            /// <summary>
            /// Enum LU for value: LU
            /// </summary>
            [EnumMember(Value = "LU")]
            LU = 11,
            
            /// <summary>
            /// Enum CH for value: CH
            /// </summary>
            [EnumMember(Value = "CH")]
            CH = 12,
            
            /// <summary>
            /// Enum US for value: US
            /// </summary>
            [EnumMember(Value = "US")]
            US = 13,
            
            /// <summary>
            /// Enum SG for value: SG
            /// </summary>
            [EnumMember(Value = "SG")]
            SG = 14,
            
            /// <summary>
            /// Enum GB for value: GB
            /// </summary>
            [EnumMember(Value = "GB")]
            GB = 15,
            
            /// <summary>
            /// Enum UK for value: UK
            /// </summary>
            [EnumMember(Value = "UK")]
            UK = 16
        }

        /// <summary>
        /// Country code according to ISO Alpha-2
        /// </summary>
        /// <value>Country code according to ISO Alpha-2</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public CountryEnum Country { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BankInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankInfo" /> class.
        /// </summary>
        /// <param name="bic">Business Identifier Code of account servicing institution according to ISO 9362. (required).</param>
        /// <param name="country">Country code according to ISO Alpha-2 (required).</param>
        /// <param name="name">Unit name (required).</param>
        public BankInfo(BicEnum bic = default(BicEnum), CountryEnum country = default(CountryEnum), string name = default(string))
        {
            // to ensure "bic" is required (not null)
            if (bic == null)
            {
                throw new InvalidDataException("bic is a required property for BankInfo and cannot be null");
            }
            else
            {
                this.Bic = bic;
            }
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new InvalidDataException("country is a required property for BankInfo and cannot be null");
            }
            else
            {
                this.Country = country;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for BankInfo and cannot be null");
            }
            else
            {
                this.Name = name;
            }
        }
        


        /// <summary>
        /// Unit name
        /// </summary>
        /// <value>Unit name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankInfo {\n");
            sb.Append("  Bic: ").Append(Bic).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankInfo);
        }

        /// <summary>
        /// Returns true if BankInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of BankInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bic == input.Bic ||
                    (this.Bic != null &&
                    this.Bic.Equals(input.Bic))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bic != null)
                    hashCode = hashCode * 59 + this.Bic.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

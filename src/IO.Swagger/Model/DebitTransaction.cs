/* 
 * Nordea Account Information Services API v3
 *
 * Open Banking API
 *
 * OpenAPI spec version: 2.2.0-SNAPSHOT
 * Contact: support@nordeaopenbanking.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Debit transaction with negative amount
    /// </summary>
    [DataContract]
    public partial class DebitTransaction : Transaction,  IEquatable<DebitTransaction>, IValidatableObject
    {
        /// <summary>
        /// Currency code according to ISO 4217
        /// </summary>
        /// <value>Currency code according to ISO 4217</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            
            /// <summary>
            /// Enum AED for value: AED
            /// </summary>
            [EnumMember(Value = "AED")]
            AED = 1,
            
            /// <summary>
            /// Enum AFN for value: AFN
            /// </summary>
            [EnumMember(Value = "AFN")]
            AFN = 2,
            
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 3,
            
            /// <summary>
            /// Enum AMD for value: AMD
            /// </summary>
            [EnumMember(Value = "AMD")]
            AMD = 4,
            
            /// <summary>
            /// Enum ANG for value: ANG
            /// </summary>
            [EnumMember(Value = "ANG")]
            ANG = 5,
            
            /// <summary>
            /// Enum AOA for value: AOA
            /// </summary>
            [EnumMember(Value = "AOA")]
            AOA = 6,
            
            /// <summary>
            /// Enum ARS for value: ARS
            /// </summary>
            [EnumMember(Value = "ARS")]
            ARS = 7,
            
            /// <summary>
            /// Enum AUD for value: AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD = 8,
            
            /// <summary>
            /// Enum AWG for value: AWG
            /// </summary>
            [EnumMember(Value = "AWG")]
            AWG = 9,
            
            /// <summary>
            /// Enum AZN for value: AZN
            /// </summary>
            [EnumMember(Value = "AZN")]
            AZN = 10,
            
            /// <summary>
            /// Enum BAM for value: BAM
            /// </summary>
            [EnumMember(Value = "BAM")]
            BAM = 11,
            
            /// <summary>
            /// Enum BBD for value: BBD
            /// </summary>
            [EnumMember(Value = "BBD")]
            BBD = 12,
            
            /// <summary>
            /// Enum BDT for value: BDT
            /// </summary>
            [EnumMember(Value = "BDT")]
            BDT = 13,
            
            /// <summary>
            /// Enum BGN for value: BGN
            /// </summary>
            [EnumMember(Value = "BGN")]
            BGN = 14,
            
            /// <summary>
            /// Enum BHD for value: BHD
            /// </summary>
            [EnumMember(Value = "BHD")]
            BHD = 15,
            
            /// <summary>
            /// Enum BIF for value: BIF
            /// </summary>
            [EnumMember(Value = "BIF")]
            BIF = 16,
            
            /// <summary>
            /// Enum BMD for value: BMD
            /// </summary>
            [EnumMember(Value = "BMD")]
            BMD = 17,
            
            /// <summary>
            /// Enum BND for value: BND
            /// </summary>
            [EnumMember(Value = "BND")]
            BND = 18,
            
            /// <summary>
            /// Enum BOB for value: BOB
            /// </summary>
            [EnumMember(Value = "BOB")]
            BOB = 19,
            
            /// <summary>
            /// Enum BOV for value: BOV
            /// </summary>
            [EnumMember(Value = "BOV")]
            BOV = 20,
            
            /// <summary>
            /// Enum BRL for value: BRL
            /// </summary>
            [EnumMember(Value = "BRL")]
            BRL = 21,
            
            /// <summary>
            /// Enum BSD for value: BSD
            /// </summary>
            [EnumMember(Value = "BSD")]
            BSD = 22,
            
            /// <summary>
            /// Enum BTN for value: BTN
            /// </summary>
            [EnumMember(Value = "BTN")]
            BTN = 23,
            
            /// <summary>
            /// Enum BWP for value: BWP
            /// </summary>
            [EnumMember(Value = "BWP")]
            BWP = 24,
            
            /// <summary>
            /// Enum BYN for value: BYN
            /// </summary>
            [EnumMember(Value = "BYN")]
            BYN = 25,
            
            /// <summary>
            /// Enum BYR for value: BYR
            /// </summary>
            [EnumMember(Value = "BYR")]
            BYR = 26,
            
            /// <summary>
            /// Enum BZD for value: BZD
            /// </summary>
            [EnumMember(Value = "BZD")]
            BZD = 27,
            
            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 28,
            
            /// <summary>
            /// Enum CDF for value: CDF
            /// </summary>
            [EnumMember(Value = "CDF")]
            CDF = 29,
            
            /// <summary>
            /// Enum CHE for value: CHE
            /// </summary>
            [EnumMember(Value = "CHE")]
            CHE = 30,
            
            /// <summary>
            /// Enum CHF for value: CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF = 31,
            
            /// <summary>
            /// Enum CHW for value: CHW
            /// </summary>
            [EnumMember(Value = "CHW")]
            CHW = 32,
            
            /// <summary>
            /// Enum CLF for value: CLF
            /// </summary>
            [EnumMember(Value = "CLF")]
            CLF = 33,
            
            /// <summary>
            /// Enum CLP for value: CLP
            /// </summary>
            [EnumMember(Value = "CLP")]
            CLP = 34,
            
            /// <summary>
            /// Enum CNY for value: CNY
            /// </summary>
            [EnumMember(Value = "CNY")]
            CNY = 35,
            
            /// <summary>
            /// Enum COP for value: COP
            /// </summary>
            [EnumMember(Value = "COP")]
            COP = 36,
            
            /// <summary>
            /// Enum COU for value: COU
            /// </summary>
            [EnumMember(Value = "COU")]
            COU = 37,
            
            /// <summary>
            /// Enum CRC for value: CRC
            /// </summary>
            [EnumMember(Value = "CRC")]
            CRC = 38,
            
            /// <summary>
            /// Enum CUC for value: CUC
            /// </summary>
            [EnumMember(Value = "CUC")]
            CUC = 39,
            
            /// <summary>
            /// Enum CUP for value: CUP
            /// </summary>
            [EnumMember(Value = "CUP")]
            CUP = 40,
            
            /// <summary>
            /// Enum CVE for value: CVE
            /// </summary>
            [EnumMember(Value = "CVE")]
            CVE = 41,
            
            /// <summary>
            /// Enum CZK for value: CZK
            /// </summary>
            [EnumMember(Value = "CZK")]
            CZK = 42,
            
            /// <summary>
            /// Enum DJF for value: DJF
            /// </summary>
            [EnumMember(Value = "DJF")]
            DJF = 43,
            
            /// <summary>
            /// Enum DKK for value: DKK
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKK = 44,
            
            /// <summary>
            /// Enum DOP for value: DOP
            /// </summary>
            [EnumMember(Value = "DOP")]
            DOP = 45,
            
            /// <summary>
            /// Enum DZD for value: DZD
            /// </summary>
            [EnumMember(Value = "DZD")]
            DZD = 46,
            
            /// <summary>
            /// Enum EGP for value: EGP
            /// </summary>
            [EnumMember(Value = "EGP")]
            EGP = 47,
            
            /// <summary>
            /// Enum ERN for value: ERN
            /// </summary>
            [EnumMember(Value = "ERN")]
            ERN = 48,
            
            /// <summary>
            /// Enum ETB for value: ETB
            /// </summary>
            [EnumMember(Value = "ETB")]
            ETB = 49,
            
            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 50,
            
            /// <summary>
            /// Enum FJD for value: FJD
            /// </summary>
            [EnumMember(Value = "FJD")]
            FJD = 51,
            
            /// <summary>
            /// Enum FKP for value: FKP
            /// </summary>
            [EnumMember(Value = "FKP")]
            FKP = 52,
            
            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 53,
            
            /// <summary>
            /// Enum GEL for value: GEL
            /// </summary>
            [EnumMember(Value = "GEL")]
            GEL = 54,
            
            /// <summary>
            /// Enum GHS for value: GHS
            /// </summary>
            [EnumMember(Value = "GHS")]
            GHS = 55,
            
            /// <summary>
            /// Enum GIP for value: GIP
            /// </summary>
            [EnumMember(Value = "GIP")]
            GIP = 56,
            
            /// <summary>
            /// Enum GMD for value: GMD
            /// </summary>
            [EnumMember(Value = "GMD")]
            GMD = 57,
            
            /// <summary>
            /// Enum GNF for value: GNF
            /// </summary>
            [EnumMember(Value = "GNF")]
            GNF = 58,
            
            /// <summary>
            /// Enum GTQ for value: GTQ
            /// </summary>
            [EnumMember(Value = "GTQ")]
            GTQ = 59,
            
            /// <summary>
            /// Enum GYD for value: GYD
            /// </summary>
            [EnumMember(Value = "GYD")]
            GYD = 60,
            
            /// <summary>
            /// Enum HKD for value: HKD
            /// </summary>
            [EnumMember(Value = "HKD")]
            HKD = 61,
            
            /// <summary>
            /// Enum HNL for value: HNL
            /// </summary>
            [EnumMember(Value = "HNL")]
            HNL = 62,
            
            /// <summary>
            /// Enum HRK for value: HRK
            /// </summary>
            [EnumMember(Value = "HRK")]
            HRK = 63,
            
            /// <summary>
            /// Enum HTG for value: HTG
            /// </summary>
            [EnumMember(Value = "HTG")]
            HTG = 64,
            
            /// <summary>
            /// Enum HUF for value: HUF
            /// </summary>
            [EnumMember(Value = "HUF")]
            HUF = 65,
            
            /// <summary>
            /// Enum IDR for value: IDR
            /// </summary>
            [EnumMember(Value = "IDR")]
            IDR = 66,
            
            /// <summary>
            /// Enum ILS for value: ILS
            /// </summary>
            [EnumMember(Value = "ILS")]
            ILS = 67,
            
            /// <summary>
            /// Enum INR for value: INR
            /// </summary>
            [EnumMember(Value = "INR")]
            INR = 68,
            
            /// <summary>
            /// Enum IQD for value: IQD
            /// </summary>
            [EnumMember(Value = "IQD")]
            IQD = 69,
            
            /// <summary>
            /// Enum IRR for value: IRR
            /// </summary>
            [EnumMember(Value = "IRR")]
            IRR = 70,
            
            /// <summary>
            /// Enum ISK for value: ISK
            /// </summary>
            [EnumMember(Value = "ISK")]
            ISK = 71,
            
            /// <summary>
            /// Enum JMD for value: JMD
            /// </summary>
            [EnumMember(Value = "JMD")]
            JMD = 72,
            
            /// <summary>
            /// Enum JOD for value: JOD
            /// </summary>
            [EnumMember(Value = "JOD")]
            JOD = 73,
            
            /// <summary>
            /// Enum JPY for value: JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY = 74,
            
            /// <summary>
            /// Enum KES for value: KES
            /// </summary>
            [EnumMember(Value = "KES")]
            KES = 75,
            
            /// <summary>
            /// Enum KGS for value: KGS
            /// </summary>
            [EnumMember(Value = "KGS")]
            KGS = 76,
            
            /// <summary>
            /// Enum KHR for value: KHR
            /// </summary>
            [EnumMember(Value = "KHR")]
            KHR = 77,
            
            /// <summary>
            /// Enum KMF for value: KMF
            /// </summary>
            [EnumMember(Value = "KMF")]
            KMF = 78,
            
            /// <summary>
            /// Enum KPW for value: KPW
            /// </summary>
            [EnumMember(Value = "KPW")]
            KPW = 79,
            
            /// <summary>
            /// Enum KRW for value: KRW
            /// </summary>
            [EnumMember(Value = "KRW")]
            KRW = 80,
            
            /// <summary>
            /// Enum KWD for value: KWD
            /// </summary>
            [EnumMember(Value = "KWD")]
            KWD = 81,
            
            /// <summary>
            /// Enum KYD for value: KYD
            /// </summary>
            [EnumMember(Value = "KYD")]
            KYD = 82,
            
            /// <summary>
            /// Enum KZT for value: KZT
            /// </summary>
            [EnumMember(Value = "KZT")]
            KZT = 83,
            
            /// <summary>
            /// Enum LAK for value: LAK
            /// </summary>
            [EnumMember(Value = "LAK")]
            LAK = 84,
            
            /// <summary>
            /// Enum LBP for value: LBP
            /// </summary>
            [EnumMember(Value = "LBP")]
            LBP = 85,
            
            /// <summary>
            /// Enum LKR for value: LKR
            /// </summary>
            [EnumMember(Value = "LKR")]
            LKR = 86,
            
            /// <summary>
            /// Enum LRD for value: LRD
            /// </summary>
            [EnumMember(Value = "LRD")]
            LRD = 87,
            
            /// <summary>
            /// Enum LSL for value: LSL
            /// </summary>
            [EnumMember(Value = "LSL")]
            LSL = 88,
            
            /// <summary>
            /// Enum LYD for value: LYD
            /// </summary>
            [EnumMember(Value = "LYD")]
            LYD = 89,
            
            /// <summary>
            /// Enum MAD for value: MAD
            /// </summary>
            [EnumMember(Value = "MAD")]
            MAD = 90,
            
            /// <summary>
            /// Enum MDL for value: MDL
            /// </summary>
            [EnumMember(Value = "MDL")]
            MDL = 91,
            
            /// <summary>
            /// Enum MGA for value: MGA
            /// </summary>
            [EnumMember(Value = "MGA")]
            MGA = 92,
            
            /// <summary>
            /// Enum MKD for value: MKD
            /// </summary>
            [EnumMember(Value = "MKD")]
            MKD = 93,
            
            /// <summary>
            /// Enum MMK for value: MMK
            /// </summary>
            [EnumMember(Value = "MMK")]
            MMK = 94,
            
            /// <summary>
            /// Enum MNT for value: MNT
            /// </summary>
            [EnumMember(Value = "MNT")]
            MNT = 95,
            
            /// <summary>
            /// Enum MOP for value: MOP
            /// </summary>
            [EnumMember(Value = "MOP")]
            MOP = 96,
            
            /// <summary>
            /// Enum MRO for value: MRO
            /// </summary>
            [EnumMember(Value = "MRO")]
            MRO = 97,
            
            /// <summary>
            /// Enum MUR for value: MUR
            /// </summary>
            [EnumMember(Value = "MUR")]
            MUR = 98,
            
            /// <summary>
            /// Enum MVR for value: MVR
            /// </summary>
            [EnumMember(Value = "MVR")]
            MVR = 99,
            
            /// <summary>
            /// Enum MWK for value: MWK
            /// </summary>
            [EnumMember(Value = "MWK")]
            MWK = 100,
            
            /// <summary>
            /// Enum MXN for value: MXN
            /// </summary>
            [EnumMember(Value = "MXN")]
            MXN = 101,
            
            /// <summary>
            /// Enum MXV for value: MXV
            /// </summary>
            [EnumMember(Value = "MXV")]
            MXV = 102,
            
            /// <summary>
            /// Enum MYR for value: MYR
            /// </summary>
            [EnumMember(Value = "MYR")]
            MYR = 103,
            
            /// <summary>
            /// Enum MZN for value: MZN
            /// </summary>
            [EnumMember(Value = "MZN")]
            MZN = 104,
            
            /// <summary>
            /// Enum NAD for value: NAD
            /// </summary>
            [EnumMember(Value = "NAD")]
            NAD = 105,
            
            /// <summary>
            /// Enum NGN for value: NGN
            /// </summary>
            [EnumMember(Value = "NGN")]
            NGN = 106,
            
            /// <summary>
            /// Enum NIO for value: NIO
            /// </summary>
            [EnumMember(Value = "NIO")]
            NIO = 107,
            
            /// <summary>
            /// Enum NOK for value: NOK
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOK = 108,
            
            /// <summary>
            /// Enum NPR for value: NPR
            /// </summary>
            [EnumMember(Value = "NPR")]
            NPR = 109,
            
            /// <summary>
            /// Enum NZD for value: NZD
            /// </summary>
            [EnumMember(Value = "NZD")]
            NZD = 110,
            
            /// <summary>
            /// Enum OMR for value: OMR
            /// </summary>
            [EnumMember(Value = "OMR")]
            OMR = 111,
            
            /// <summary>
            /// Enum PAB for value: PAB
            /// </summary>
            [EnumMember(Value = "PAB")]
            PAB = 112,
            
            /// <summary>
            /// Enum PEN for value: PEN
            /// </summary>
            [EnumMember(Value = "PEN")]
            PEN = 113,
            
            /// <summary>
            /// Enum PGK for value: PGK
            /// </summary>
            [EnumMember(Value = "PGK")]
            PGK = 114,
            
            /// <summary>
            /// Enum PHP for value: PHP
            /// </summary>
            [EnumMember(Value = "PHP")]
            PHP = 115,
            
            /// <summary>
            /// Enum PKR for value: PKR
            /// </summary>
            [EnumMember(Value = "PKR")]
            PKR = 116,
            
            /// <summary>
            /// Enum PLN for value: PLN
            /// </summary>
            [EnumMember(Value = "PLN")]
            PLN = 117,
            
            /// <summary>
            /// Enum PYG for value: PYG
            /// </summary>
            [EnumMember(Value = "PYG")]
            PYG = 118,
            
            /// <summary>
            /// Enum QAR for value: QAR
            /// </summary>
            [EnumMember(Value = "QAR")]
            QAR = 119,
            
            /// <summary>
            /// Enum RON for value: RON
            /// </summary>
            [EnumMember(Value = "RON")]
            RON = 120,
            
            /// <summary>
            /// Enum RSD for value: RSD
            /// </summary>
            [EnumMember(Value = "RSD")]
            RSD = 121,
            
            /// <summary>
            /// Enum RUB for value: RUB
            /// </summary>
            [EnumMember(Value = "RUB")]
            RUB = 122,
            
            /// <summary>
            /// Enum RWF for value: RWF
            /// </summary>
            [EnumMember(Value = "RWF")]
            RWF = 123,
            
            /// <summary>
            /// Enum SAR for value: SAR
            /// </summary>
            [EnumMember(Value = "SAR")]
            SAR = 124,
            
            /// <summary>
            /// Enum SBD for value: SBD
            /// </summary>
            [EnumMember(Value = "SBD")]
            SBD = 125,
            
            /// <summary>
            /// Enum SCR for value: SCR
            /// </summary>
            [EnumMember(Value = "SCR")]
            SCR = 126,
            
            /// <summary>
            /// Enum SDG for value: SDG
            /// </summary>
            [EnumMember(Value = "SDG")]
            SDG = 127,
            
            /// <summary>
            /// Enum SEK for value: SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEK = 128,
            
            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 129,
            
            /// <summary>
            /// Enum SHP for value: SHP
            /// </summary>
            [EnumMember(Value = "SHP")]
            SHP = 130,
            
            /// <summary>
            /// Enum SLL for value: SLL
            /// </summary>
            [EnumMember(Value = "SLL")]
            SLL = 131,
            
            /// <summary>
            /// Enum SOS for value: SOS
            /// </summary>
            [EnumMember(Value = "SOS")]
            SOS = 132,
            
            /// <summary>
            /// Enum SRD for value: SRD
            /// </summary>
            [EnumMember(Value = "SRD")]
            SRD = 133,
            
            /// <summary>
            /// Enum SSP for value: SSP
            /// </summary>
            [EnumMember(Value = "SSP")]
            SSP = 134,
            
            /// <summary>
            /// Enum STD for value: STD
            /// </summary>
            [EnumMember(Value = "STD")]
            STD = 135,
            
            /// <summary>
            /// Enum SVC for value: SVC
            /// </summary>
            [EnumMember(Value = "SVC")]
            SVC = 136,
            
            /// <summary>
            /// Enum SYP for value: SYP
            /// </summary>
            [EnumMember(Value = "SYP")]
            SYP = 137,
            
            /// <summary>
            /// Enum SZL for value: SZL
            /// </summary>
            [EnumMember(Value = "SZL")]
            SZL = 138,
            
            /// <summary>
            /// Enum THB for value: THB
            /// </summary>
            [EnumMember(Value = "THB")]
            THB = 139,
            
            /// <summary>
            /// Enum TJS for value: TJS
            /// </summary>
            [EnumMember(Value = "TJS")]
            TJS = 140,
            
            /// <summary>
            /// Enum TMT for value: TMT
            /// </summary>
            [EnumMember(Value = "TMT")]
            TMT = 141,
            
            /// <summary>
            /// Enum TND for value: TND
            /// </summary>
            [EnumMember(Value = "TND")]
            TND = 142,
            
            /// <summary>
            /// Enum TOP for value: TOP
            /// </summary>
            [EnumMember(Value = "TOP")]
            TOP = 143,
            
            /// <summary>
            /// Enum TRY for value: TRY
            /// </summary>
            [EnumMember(Value = "TRY")]
            TRY = 144,
            
            /// <summary>
            /// Enum TTD for value: TTD
            /// </summary>
            [EnumMember(Value = "TTD")]
            TTD = 145,
            
            /// <summary>
            /// Enum TWD for value: TWD
            /// </summary>
            [EnumMember(Value = "TWD")]
            TWD = 146,
            
            /// <summary>
            /// Enum TZS for value: TZS
            /// </summary>
            [EnumMember(Value = "TZS")]
            TZS = 147,
            
            /// <summary>
            /// Enum UAH for value: UAH
            /// </summary>
            [EnumMember(Value = "UAH")]
            UAH = 148,
            
            /// <summary>
            /// Enum UGX for value: UGX
            /// </summary>
            [EnumMember(Value = "UGX")]
            UGX = 149,
            
            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 150,
            
            /// <summary>
            /// Enum USN for value: USN
            /// </summary>
            [EnumMember(Value = "USN")]
            USN = 151,
            
            /// <summary>
            /// Enum UYI for value: UYI
            /// </summary>
            [EnumMember(Value = "UYI")]
            UYI = 152,
            
            /// <summary>
            /// Enum UYU for value: UYU
            /// </summary>
            [EnumMember(Value = "UYU")]
            UYU = 153,
            
            /// <summary>
            /// Enum UZS for value: UZS
            /// </summary>
            [EnumMember(Value = "UZS")]
            UZS = 154,
            
            /// <summary>
            /// Enum VEF for value: VEF
            /// </summary>
            [EnumMember(Value = "VEF")]
            VEF = 155,
            
            /// <summary>
            /// Enum VND for value: VND
            /// </summary>
            [EnumMember(Value = "VND")]
            VND = 156,
            
            /// <summary>
            /// Enum VUV for value: VUV
            /// </summary>
            [EnumMember(Value = "VUV")]
            VUV = 157,
            
            /// <summary>
            /// Enum WST for value: WST
            /// </summary>
            [EnumMember(Value = "WST")]
            WST = 158,
            
            /// <summary>
            /// Enum XAF for value: XAF
            /// </summary>
            [EnumMember(Value = "XAF")]
            XAF = 159,
            
            /// <summary>
            /// Enum XAG for value: XAG
            /// </summary>
            [EnumMember(Value = "XAG")]
            XAG = 160,
            
            /// <summary>
            /// Enum XAU for value: XAU
            /// </summary>
            [EnumMember(Value = "XAU")]
            XAU = 161,
            
            /// <summary>
            /// Enum XBA for value: XBA
            /// </summary>
            [EnumMember(Value = "XBA")]
            XBA = 162,
            
            /// <summary>
            /// Enum XBB for value: XBB
            /// </summary>
            [EnumMember(Value = "XBB")]
            XBB = 163,
            
            /// <summary>
            /// Enum XBC for value: XBC
            /// </summary>
            [EnumMember(Value = "XBC")]
            XBC = 164,
            
            /// <summary>
            /// Enum XBD for value: XBD
            /// </summary>
            [EnumMember(Value = "XBD")]
            XBD = 165,
            
            /// <summary>
            /// Enum XCD for value: XCD
            /// </summary>
            [EnumMember(Value = "XCD")]
            XCD = 166,
            
            /// <summary>
            /// Enum XDR for value: XDR
            /// </summary>
            [EnumMember(Value = "XDR")]
            XDR = 167,
            
            /// <summary>
            /// Enum XOF for value: XOF
            /// </summary>
            [EnumMember(Value = "XOF")]
            XOF = 168,
            
            /// <summary>
            /// Enum XPD for value: XPD
            /// </summary>
            [EnumMember(Value = "XPD")]
            XPD = 169,
            
            /// <summary>
            /// Enum XPF for value: XPF
            /// </summary>
            [EnumMember(Value = "XPF")]
            XPF = 170,
            
            /// <summary>
            /// Enum XPT for value: XPT
            /// </summary>
            [EnumMember(Value = "XPT")]
            XPT = 171,
            
            /// <summary>
            /// Enum XSU for value: XSU
            /// </summary>
            [EnumMember(Value = "XSU")]
            XSU = 172,
            
            /// <summary>
            /// Enum XTS for value: XTS
            /// </summary>
            [EnumMember(Value = "XTS")]
            XTS = 173,
            
            /// <summary>
            /// Enum XUA for value: XUA
            /// </summary>
            [EnumMember(Value = "XUA")]
            XUA = 174,
            
            /// <summary>
            /// Enum XXX for value: XXX
            /// </summary>
            [EnumMember(Value = "XXX")]
            XXX = 175,
            
            /// <summary>
            /// Enum YER for value: YER
            /// </summary>
            [EnumMember(Value = "YER")]
            YER = 176,
            
            /// <summary>
            /// Enum ZAR for value: ZAR
            /// </summary>
            [EnumMember(Value = "ZAR")]
            ZAR = 177,
            
            /// <summary>
            /// Enum ZMW for value: ZMW
            /// </summary>
            [EnumMember(Value = "ZMW")]
            ZMW = 178,
            
            /// <summary>
            /// Enum ZWL for value: ZWL
            /// </summary>
            [EnumMember(Value = "ZWL")]
            ZWL = 179
        }

        /// <summary>
        /// Currency code according to ISO 4217
        /// </summary>
        /// <value>Currency code according to ISO 4217</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public CurrencyEnum Currency { get; set; }
        /// <summary>
        /// Currency code according to ISO 4217
        /// </summary>
        /// <value>Currency code according to ISO 4217</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OriginalCurrencyEnum
        {
            
            /// <summary>
            /// Enum AED for value: AED
            /// </summary>
            [EnumMember(Value = "AED")]
            AED = 1,
            
            /// <summary>
            /// Enum AFN for value: AFN
            /// </summary>
            [EnumMember(Value = "AFN")]
            AFN = 2,
            
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 3,
            
            /// <summary>
            /// Enum AMD for value: AMD
            /// </summary>
            [EnumMember(Value = "AMD")]
            AMD = 4,
            
            /// <summary>
            /// Enum ANG for value: ANG
            /// </summary>
            [EnumMember(Value = "ANG")]
            ANG = 5,
            
            /// <summary>
            /// Enum AOA for value: AOA
            /// </summary>
            [EnumMember(Value = "AOA")]
            AOA = 6,
            
            /// <summary>
            /// Enum ARS for value: ARS
            /// </summary>
            [EnumMember(Value = "ARS")]
            ARS = 7,
            
            /// <summary>
            /// Enum AUD for value: AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD = 8,
            
            /// <summary>
            /// Enum AWG for value: AWG
            /// </summary>
            [EnumMember(Value = "AWG")]
            AWG = 9,
            
            /// <summary>
            /// Enum AZN for value: AZN
            /// </summary>
            [EnumMember(Value = "AZN")]
            AZN = 10,
            
            /// <summary>
            /// Enum BAM for value: BAM
            /// </summary>
            [EnumMember(Value = "BAM")]
            BAM = 11,
            
            /// <summary>
            /// Enum BBD for value: BBD
            /// </summary>
            [EnumMember(Value = "BBD")]
            BBD = 12,
            
            /// <summary>
            /// Enum BDT for value: BDT
            /// </summary>
            [EnumMember(Value = "BDT")]
            BDT = 13,
            
            /// <summary>
            /// Enum BGN for value: BGN
            /// </summary>
            [EnumMember(Value = "BGN")]
            BGN = 14,
            
            /// <summary>
            /// Enum BHD for value: BHD
            /// </summary>
            [EnumMember(Value = "BHD")]
            BHD = 15,
            
            /// <summary>
            /// Enum BIF for value: BIF
            /// </summary>
            [EnumMember(Value = "BIF")]
            BIF = 16,
            
            /// <summary>
            /// Enum BMD for value: BMD
            /// </summary>
            [EnumMember(Value = "BMD")]
            BMD = 17,
            
            /// <summary>
            /// Enum BND for value: BND
            /// </summary>
            [EnumMember(Value = "BND")]
            BND = 18,
            
            /// <summary>
            /// Enum BOB for value: BOB
            /// </summary>
            [EnumMember(Value = "BOB")]
            BOB = 19,
            
            /// <summary>
            /// Enum BOV for value: BOV
            /// </summary>
            [EnumMember(Value = "BOV")]
            BOV = 20,
            
            /// <summary>
            /// Enum BRL for value: BRL
            /// </summary>
            [EnumMember(Value = "BRL")]
            BRL = 21,
            
            /// <summary>
            /// Enum BSD for value: BSD
            /// </summary>
            [EnumMember(Value = "BSD")]
            BSD = 22,
            
            /// <summary>
            /// Enum BTN for value: BTN
            /// </summary>
            [EnumMember(Value = "BTN")]
            BTN = 23,
            
            /// <summary>
            /// Enum BWP for value: BWP
            /// </summary>
            [EnumMember(Value = "BWP")]
            BWP = 24,
            
            /// <summary>
            /// Enum BYN for value: BYN
            /// </summary>
            [EnumMember(Value = "BYN")]
            BYN = 25,
            
            /// <summary>
            /// Enum BYR for value: BYR
            /// </summary>
            [EnumMember(Value = "BYR")]
            BYR = 26,
            
            /// <summary>
            /// Enum BZD for value: BZD
            /// </summary>
            [EnumMember(Value = "BZD")]
            BZD = 27,
            
            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 28,
            
            /// <summary>
            /// Enum CDF for value: CDF
            /// </summary>
            [EnumMember(Value = "CDF")]
            CDF = 29,
            
            /// <summary>
            /// Enum CHE for value: CHE
            /// </summary>
            [EnumMember(Value = "CHE")]
            CHE = 30,
            
            /// <summary>
            /// Enum CHF for value: CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF = 31,
            
            /// <summary>
            /// Enum CHW for value: CHW
            /// </summary>
            [EnumMember(Value = "CHW")]
            CHW = 32,
            
            /// <summary>
            /// Enum CLF for value: CLF
            /// </summary>
            [EnumMember(Value = "CLF")]
            CLF = 33,
            
            /// <summary>
            /// Enum CLP for value: CLP
            /// </summary>
            [EnumMember(Value = "CLP")]
            CLP = 34,
            
            /// <summary>
            /// Enum CNY for value: CNY
            /// </summary>
            [EnumMember(Value = "CNY")]
            CNY = 35,
            
            /// <summary>
            /// Enum COP for value: COP
            /// </summary>
            [EnumMember(Value = "COP")]
            COP = 36,
            
            /// <summary>
            /// Enum COU for value: COU
            /// </summary>
            [EnumMember(Value = "COU")]
            COU = 37,
            
            /// <summary>
            /// Enum CRC for value: CRC
            /// </summary>
            [EnumMember(Value = "CRC")]
            CRC = 38,
            
            /// <summary>
            /// Enum CUC for value: CUC
            /// </summary>
            [EnumMember(Value = "CUC")]
            CUC = 39,
            
            /// <summary>
            /// Enum CUP for value: CUP
            /// </summary>
            [EnumMember(Value = "CUP")]
            CUP = 40,
            
            /// <summary>
            /// Enum CVE for value: CVE
            /// </summary>
            [EnumMember(Value = "CVE")]
            CVE = 41,
            
            /// <summary>
            /// Enum CZK for value: CZK
            /// </summary>
            [EnumMember(Value = "CZK")]
            CZK = 42,
            
            /// <summary>
            /// Enum DJF for value: DJF
            /// </summary>
            [EnumMember(Value = "DJF")]
            DJF = 43,
            
            /// <summary>
            /// Enum DKK for value: DKK
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKK = 44,
            
            /// <summary>
            /// Enum DOP for value: DOP
            /// </summary>
            [EnumMember(Value = "DOP")]
            DOP = 45,
            
            /// <summary>
            /// Enum DZD for value: DZD
            /// </summary>
            [EnumMember(Value = "DZD")]
            DZD = 46,
            
            /// <summary>
            /// Enum EGP for value: EGP
            /// </summary>
            [EnumMember(Value = "EGP")]
            EGP = 47,
            
            /// <summary>
            /// Enum ERN for value: ERN
            /// </summary>
            [EnumMember(Value = "ERN")]
            ERN = 48,
            
            /// <summary>
            /// Enum ETB for value: ETB
            /// </summary>
            [EnumMember(Value = "ETB")]
            ETB = 49,
            
            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 50,
            
            /// <summary>
            /// Enum FJD for value: FJD
            /// </summary>
            [EnumMember(Value = "FJD")]
            FJD = 51,
            
            /// <summary>
            /// Enum FKP for value: FKP
            /// </summary>
            [EnumMember(Value = "FKP")]
            FKP = 52,
            
            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 53,
            
            /// <summary>
            /// Enum GEL for value: GEL
            /// </summary>
            [EnumMember(Value = "GEL")]
            GEL = 54,
            
            /// <summary>
            /// Enum GHS for value: GHS
            /// </summary>
            [EnumMember(Value = "GHS")]
            GHS = 55,
            
            /// <summary>
            /// Enum GIP for value: GIP
            /// </summary>
            [EnumMember(Value = "GIP")]
            GIP = 56,
            
            /// <summary>
            /// Enum GMD for value: GMD
            /// </summary>
            [EnumMember(Value = "GMD")]
            GMD = 57,
            
            /// <summary>
            /// Enum GNF for value: GNF
            /// </summary>
            [EnumMember(Value = "GNF")]
            GNF = 58,
            
            /// <summary>
            /// Enum GTQ for value: GTQ
            /// </summary>
            [EnumMember(Value = "GTQ")]
            GTQ = 59,
            
            /// <summary>
            /// Enum GYD for value: GYD
            /// </summary>
            [EnumMember(Value = "GYD")]
            GYD = 60,
            
            /// <summary>
            /// Enum HKD for value: HKD
            /// </summary>
            [EnumMember(Value = "HKD")]
            HKD = 61,
            
            /// <summary>
            /// Enum HNL for value: HNL
            /// </summary>
            [EnumMember(Value = "HNL")]
            HNL = 62,
            
            /// <summary>
            /// Enum HRK for value: HRK
            /// </summary>
            [EnumMember(Value = "HRK")]
            HRK = 63,
            
            /// <summary>
            /// Enum HTG for value: HTG
            /// </summary>
            [EnumMember(Value = "HTG")]
            HTG = 64,
            
            /// <summary>
            /// Enum HUF for value: HUF
            /// </summary>
            [EnumMember(Value = "HUF")]
            HUF = 65,
            
            /// <summary>
            /// Enum IDR for value: IDR
            /// </summary>
            [EnumMember(Value = "IDR")]
            IDR = 66,
            
            /// <summary>
            /// Enum ILS for value: ILS
            /// </summary>
            [EnumMember(Value = "ILS")]
            ILS = 67,
            
            /// <summary>
            /// Enum INR for value: INR
            /// </summary>
            [EnumMember(Value = "INR")]
            INR = 68,
            
            /// <summary>
            /// Enum IQD for value: IQD
            /// </summary>
            [EnumMember(Value = "IQD")]
            IQD = 69,
            
            /// <summary>
            /// Enum IRR for value: IRR
            /// </summary>
            [EnumMember(Value = "IRR")]
            IRR = 70,
            
            /// <summary>
            /// Enum ISK for value: ISK
            /// </summary>
            [EnumMember(Value = "ISK")]
            ISK = 71,
            
            /// <summary>
            /// Enum JMD for value: JMD
            /// </summary>
            [EnumMember(Value = "JMD")]
            JMD = 72,
            
            /// <summary>
            /// Enum JOD for value: JOD
            /// </summary>
            [EnumMember(Value = "JOD")]
            JOD = 73,
            
            /// <summary>
            /// Enum JPY for value: JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY = 74,
            
            /// <summary>
            /// Enum KES for value: KES
            /// </summary>
            [EnumMember(Value = "KES")]
            KES = 75,
            
            /// <summary>
            /// Enum KGS for value: KGS
            /// </summary>
            [EnumMember(Value = "KGS")]
            KGS = 76,
            
            /// <summary>
            /// Enum KHR for value: KHR
            /// </summary>
            [EnumMember(Value = "KHR")]
            KHR = 77,
            
            /// <summary>
            /// Enum KMF for value: KMF
            /// </summary>
            [EnumMember(Value = "KMF")]
            KMF = 78,
            
            /// <summary>
            /// Enum KPW for value: KPW
            /// </summary>
            [EnumMember(Value = "KPW")]
            KPW = 79,
            
            /// <summary>
            /// Enum KRW for value: KRW
            /// </summary>
            [EnumMember(Value = "KRW")]
            KRW = 80,
            
            /// <summary>
            /// Enum KWD for value: KWD
            /// </summary>
            [EnumMember(Value = "KWD")]
            KWD = 81,
            
            /// <summary>
            /// Enum KYD for value: KYD
            /// </summary>
            [EnumMember(Value = "KYD")]
            KYD = 82,
            
            /// <summary>
            /// Enum KZT for value: KZT
            /// </summary>
            [EnumMember(Value = "KZT")]
            KZT = 83,
            
            /// <summary>
            /// Enum LAK for value: LAK
            /// </summary>
            [EnumMember(Value = "LAK")]
            LAK = 84,
            
            /// <summary>
            /// Enum LBP for value: LBP
            /// </summary>
            [EnumMember(Value = "LBP")]
            LBP = 85,
            
            /// <summary>
            /// Enum LKR for value: LKR
            /// </summary>
            [EnumMember(Value = "LKR")]
            LKR = 86,
            
            /// <summary>
            /// Enum LRD for value: LRD
            /// </summary>
            [EnumMember(Value = "LRD")]
            LRD = 87,
            
            /// <summary>
            /// Enum LSL for value: LSL
            /// </summary>
            [EnumMember(Value = "LSL")]
            LSL = 88,
            
            /// <summary>
            /// Enum LYD for value: LYD
            /// </summary>
            [EnumMember(Value = "LYD")]
            LYD = 89,
            
            /// <summary>
            /// Enum MAD for value: MAD
            /// </summary>
            [EnumMember(Value = "MAD")]
            MAD = 90,
            
            /// <summary>
            /// Enum MDL for value: MDL
            /// </summary>
            [EnumMember(Value = "MDL")]
            MDL = 91,
            
            /// <summary>
            /// Enum MGA for value: MGA
            /// </summary>
            [EnumMember(Value = "MGA")]
            MGA = 92,
            
            /// <summary>
            /// Enum MKD for value: MKD
            /// </summary>
            [EnumMember(Value = "MKD")]
            MKD = 93,
            
            /// <summary>
            /// Enum MMK for value: MMK
            /// </summary>
            [EnumMember(Value = "MMK")]
            MMK = 94,
            
            /// <summary>
            /// Enum MNT for value: MNT
            /// </summary>
            [EnumMember(Value = "MNT")]
            MNT = 95,
            
            /// <summary>
            /// Enum MOP for value: MOP
            /// </summary>
            [EnumMember(Value = "MOP")]
            MOP = 96,
            
            /// <summary>
            /// Enum MRO for value: MRO
            /// </summary>
            [EnumMember(Value = "MRO")]
            MRO = 97,
            
            /// <summary>
            /// Enum MUR for value: MUR
            /// </summary>
            [EnumMember(Value = "MUR")]
            MUR = 98,
            
            /// <summary>
            /// Enum MVR for value: MVR
            /// </summary>
            [EnumMember(Value = "MVR")]
            MVR = 99,
            
            /// <summary>
            /// Enum MWK for value: MWK
            /// </summary>
            [EnumMember(Value = "MWK")]
            MWK = 100,
            
            /// <summary>
            /// Enum MXN for value: MXN
            /// </summary>
            [EnumMember(Value = "MXN")]
            MXN = 101,
            
            /// <summary>
            /// Enum MXV for value: MXV
            /// </summary>
            [EnumMember(Value = "MXV")]
            MXV = 102,
            
            /// <summary>
            /// Enum MYR for value: MYR
            /// </summary>
            [EnumMember(Value = "MYR")]
            MYR = 103,
            
            /// <summary>
            /// Enum MZN for value: MZN
            /// </summary>
            [EnumMember(Value = "MZN")]
            MZN = 104,
            
            /// <summary>
            /// Enum NAD for value: NAD
            /// </summary>
            [EnumMember(Value = "NAD")]
            NAD = 105,
            
            /// <summary>
            /// Enum NGN for value: NGN
            /// </summary>
            [EnumMember(Value = "NGN")]
            NGN = 106,
            
            /// <summary>
            /// Enum NIO for value: NIO
            /// </summary>
            [EnumMember(Value = "NIO")]
            NIO = 107,
            
            /// <summary>
            /// Enum NOK for value: NOK
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOK = 108,
            
            /// <summary>
            /// Enum NPR for value: NPR
            /// </summary>
            [EnumMember(Value = "NPR")]
            NPR = 109,
            
            /// <summary>
            /// Enum NZD for value: NZD
            /// </summary>
            [EnumMember(Value = "NZD")]
            NZD = 110,
            
            /// <summary>
            /// Enum OMR for value: OMR
            /// </summary>
            [EnumMember(Value = "OMR")]
            OMR = 111,
            
            /// <summary>
            /// Enum PAB for value: PAB
            /// </summary>
            [EnumMember(Value = "PAB")]
            PAB = 112,
            
            /// <summary>
            /// Enum PEN for value: PEN
            /// </summary>
            [EnumMember(Value = "PEN")]
            PEN = 113,
            
            /// <summary>
            /// Enum PGK for value: PGK
            /// </summary>
            [EnumMember(Value = "PGK")]
            PGK = 114,
            
            /// <summary>
            /// Enum PHP for value: PHP
            /// </summary>
            [EnumMember(Value = "PHP")]
            PHP = 115,
            
            /// <summary>
            /// Enum PKR for value: PKR
            /// </summary>
            [EnumMember(Value = "PKR")]
            PKR = 116,
            
            /// <summary>
            /// Enum PLN for value: PLN
            /// </summary>
            [EnumMember(Value = "PLN")]
            PLN = 117,
            
            /// <summary>
            /// Enum PYG for value: PYG
            /// </summary>
            [EnumMember(Value = "PYG")]
            PYG = 118,
            
            /// <summary>
            /// Enum QAR for value: QAR
            /// </summary>
            [EnumMember(Value = "QAR")]
            QAR = 119,
            
            /// <summary>
            /// Enum RON for value: RON
            /// </summary>
            [EnumMember(Value = "RON")]
            RON = 120,
            
            /// <summary>
            /// Enum RSD for value: RSD
            /// </summary>
            [EnumMember(Value = "RSD")]
            RSD = 121,
            
            /// <summary>
            /// Enum RUB for value: RUB
            /// </summary>
            [EnumMember(Value = "RUB")]
            RUB = 122,
            
            /// <summary>
            /// Enum RWF for value: RWF
            /// </summary>
            [EnumMember(Value = "RWF")]
            RWF = 123,
            
            /// <summary>
            /// Enum SAR for value: SAR
            /// </summary>
            [EnumMember(Value = "SAR")]
            SAR = 124,
            
            /// <summary>
            /// Enum SBD for value: SBD
            /// </summary>
            [EnumMember(Value = "SBD")]
            SBD = 125,
            
            /// <summary>
            /// Enum SCR for value: SCR
            /// </summary>
            [EnumMember(Value = "SCR")]
            SCR = 126,
            
            /// <summary>
            /// Enum SDG for value: SDG
            /// </summary>
            [EnumMember(Value = "SDG")]
            SDG = 127,
            
            /// <summary>
            /// Enum SEK for value: SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEK = 128,
            
            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 129,
            
            /// <summary>
            /// Enum SHP for value: SHP
            /// </summary>
            [EnumMember(Value = "SHP")]
            SHP = 130,
            
            /// <summary>
            /// Enum SLL for value: SLL
            /// </summary>
            [EnumMember(Value = "SLL")]
            SLL = 131,
            
            /// <summary>
            /// Enum SOS for value: SOS
            /// </summary>
            [EnumMember(Value = "SOS")]
            SOS = 132,
            
            /// <summary>
            /// Enum SRD for value: SRD
            /// </summary>
            [EnumMember(Value = "SRD")]
            SRD = 133,
            
            /// <summary>
            /// Enum SSP for value: SSP
            /// </summary>
            [EnumMember(Value = "SSP")]
            SSP = 134,
            
            /// <summary>
            /// Enum STD for value: STD
            /// </summary>
            [EnumMember(Value = "STD")]
            STD = 135,
            
            /// <summary>
            /// Enum SVC for value: SVC
            /// </summary>
            [EnumMember(Value = "SVC")]
            SVC = 136,
            
            /// <summary>
            /// Enum SYP for value: SYP
            /// </summary>
            [EnumMember(Value = "SYP")]
            SYP = 137,
            
            /// <summary>
            /// Enum SZL for value: SZL
            /// </summary>
            [EnumMember(Value = "SZL")]
            SZL = 138,
            
            /// <summary>
            /// Enum THB for value: THB
            /// </summary>
            [EnumMember(Value = "THB")]
            THB = 139,
            
            /// <summary>
            /// Enum TJS for value: TJS
            /// </summary>
            [EnumMember(Value = "TJS")]
            TJS = 140,
            
            /// <summary>
            /// Enum TMT for value: TMT
            /// </summary>
            [EnumMember(Value = "TMT")]
            TMT = 141,
            
            /// <summary>
            /// Enum TND for value: TND
            /// </summary>
            [EnumMember(Value = "TND")]
            TND = 142,
            
            /// <summary>
            /// Enum TOP for value: TOP
            /// </summary>
            [EnumMember(Value = "TOP")]
            TOP = 143,
            
            /// <summary>
            /// Enum TRY for value: TRY
            /// </summary>
            [EnumMember(Value = "TRY")]
            TRY = 144,
            
            /// <summary>
            /// Enum TTD for value: TTD
            /// </summary>
            [EnumMember(Value = "TTD")]
            TTD = 145,
            
            /// <summary>
            /// Enum TWD for value: TWD
            /// </summary>
            [EnumMember(Value = "TWD")]
            TWD = 146,
            
            /// <summary>
            /// Enum TZS for value: TZS
            /// </summary>
            [EnumMember(Value = "TZS")]
            TZS = 147,
            
            /// <summary>
            /// Enum UAH for value: UAH
            /// </summary>
            [EnumMember(Value = "UAH")]
            UAH = 148,
            
            /// <summary>
            /// Enum UGX for value: UGX
            /// </summary>
            [EnumMember(Value = "UGX")]
            UGX = 149,
            
            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 150,
            
            /// <summary>
            /// Enum USN for value: USN
            /// </summary>
            [EnumMember(Value = "USN")]
            USN = 151,
            
            /// <summary>
            /// Enum UYI for value: UYI
            /// </summary>
            [EnumMember(Value = "UYI")]
            UYI = 152,
            
            /// <summary>
            /// Enum UYU for value: UYU
            /// </summary>
            [EnumMember(Value = "UYU")]
            UYU = 153,
            
            /// <summary>
            /// Enum UZS for value: UZS
            /// </summary>
            [EnumMember(Value = "UZS")]
            UZS = 154,
            
            /// <summary>
            /// Enum VEF for value: VEF
            /// </summary>
            [EnumMember(Value = "VEF")]
            VEF = 155,
            
            /// <summary>
            /// Enum VND for value: VND
            /// </summary>
            [EnumMember(Value = "VND")]
            VND = 156,
            
            /// <summary>
            /// Enum VUV for value: VUV
            /// </summary>
            [EnumMember(Value = "VUV")]
            VUV = 157,
            
            /// <summary>
            /// Enum WST for value: WST
            /// </summary>
            [EnumMember(Value = "WST")]
            WST = 158,
            
            /// <summary>
            /// Enum XAF for value: XAF
            /// </summary>
            [EnumMember(Value = "XAF")]
            XAF = 159,
            
            /// <summary>
            /// Enum XAG for value: XAG
            /// </summary>
            [EnumMember(Value = "XAG")]
            XAG = 160,
            
            /// <summary>
            /// Enum XAU for value: XAU
            /// </summary>
            [EnumMember(Value = "XAU")]
            XAU = 161,
            
            /// <summary>
            /// Enum XBA for value: XBA
            /// </summary>
            [EnumMember(Value = "XBA")]
            XBA = 162,
            
            /// <summary>
            /// Enum XBB for value: XBB
            /// </summary>
            [EnumMember(Value = "XBB")]
            XBB = 163,
            
            /// <summary>
            /// Enum XBC for value: XBC
            /// </summary>
            [EnumMember(Value = "XBC")]
            XBC = 164,
            
            /// <summary>
            /// Enum XBD for value: XBD
            /// </summary>
            [EnumMember(Value = "XBD")]
            XBD = 165,
            
            /// <summary>
            /// Enum XCD for value: XCD
            /// </summary>
            [EnumMember(Value = "XCD")]
            XCD = 166,
            
            /// <summary>
            /// Enum XDR for value: XDR
            /// </summary>
            [EnumMember(Value = "XDR")]
            XDR = 167,
            
            /// <summary>
            /// Enum XOF for value: XOF
            /// </summary>
            [EnumMember(Value = "XOF")]
            XOF = 168,
            
            /// <summary>
            /// Enum XPD for value: XPD
            /// </summary>
            [EnumMember(Value = "XPD")]
            XPD = 169,
            
            /// <summary>
            /// Enum XPF for value: XPF
            /// </summary>
            [EnumMember(Value = "XPF")]
            XPF = 170,
            
            /// <summary>
            /// Enum XPT for value: XPT
            /// </summary>
            [EnumMember(Value = "XPT")]
            XPT = 171,
            
            /// <summary>
            /// Enum XSU for value: XSU
            /// </summary>
            [EnumMember(Value = "XSU")]
            XSU = 172,
            
            /// <summary>
            /// Enum XTS for value: XTS
            /// </summary>
            [EnumMember(Value = "XTS")]
            XTS = 173,
            
            /// <summary>
            /// Enum XUA for value: XUA
            /// </summary>
            [EnumMember(Value = "XUA")]
            XUA = 174,
            
            /// <summary>
            /// Enum XXX for value: XXX
            /// </summary>
            [EnumMember(Value = "XXX")]
            XXX = 175,
            
            /// <summary>
            /// Enum YER for value: YER
            /// </summary>
            [EnumMember(Value = "YER")]
            YER = 176,
            
            /// <summary>
            /// Enum ZAR for value: ZAR
            /// </summary>
            [EnumMember(Value = "ZAR")]
            ZAR = 177,
            
            /// <summary>
            /// Enum ZMW for value: ZMW
            /// </summary>
            [EnumMember(Value = "ZMW")]
            ZMW = 178,
            
            /// <summary>
            /// Enum ZWL for value: ZWL
            /// </summary>
            [EnumMember(Value = "ZWL")]
            ZWL = 179
        }

        /// <summary>
        /// Currency code according to ISO 4217
        /// </summary>
        /// <value>Currency code according to ISO 4217</value>
        [DataMember(Name="original_currency", EmitDefaultValue=false)]
        public OriginalCurrencyEnum? OriginalCurrency { get; set; }
        /// <summary>
        /// Status of the transaction
        /// </summary>
        /// <value>Status of the transaction</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Reserved for value: reserved
            /// </summary>
            [EnumMember(Value = "reserved")]
            Reserved = 1,
            
            /// <summary>
            /// Enum Billed for value: billed
            /// </summary>
            [EnumMember(Value = "billed")]
            Billed = 2
        }

        /// <summary>
        /// Status of the transaction
        /// </summary>
        /// <value>Status of the transaction</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DebitTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DebitTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DebitTransaction" /> class.
        /// </summary>
        /// <param name="amount">Transaction value (required).</param>
        /// <param name="balanceAfterTransaction">Balance after transaction.</param>
        /// <param name="bookingDate">Date transaction was booked to the account ledger (required).</param>
        /// <param name="cardNumber">4 digits of card number of the transaction.</param>
        /// <param name="counterpartyAccount">Counterparty account details.</param>
        /// <param name="counterpartyName">Counterparty name.</param>
        /// <param name="currency">Currency code according to ISO 4217 (required).</param>
        /// <param name="currencyRate">Currency code according to ISO 4217.</param>
        /// <param name="message">Message from remitter to beneficiary. In Finland this may alternatively include a short description of the transaction e.g. &#39;Automaattiotto&#39;.</param>
        /// <param name="narrative">Transaction narrative (customer custom message).</param>
        /// <param name="originalCurrency">Currency code according to ISO 4217.</param>
        /// <param name="originalCurrencyAmount">Foreign transaction amount in original currency.</param>
        /// <param name="ownMessage">Text message for the account holder&#39;s own use.</param>
        /// <param name="paymentDate">Payment date of the transaction.</param>
        /// <param name="reference">Reference number.</param>
        /// <param name="status">Status of the transaction (required).</param>
        /// <param name="transactionDate">Date on which transaction was enacted.</param>
        /// <param name="transactionId">Unique transaction identifier as defined by the bank (required).</param>
        /// <param name="typeDescription">Description of the type of transaction, e.g. Cash withdrawal, Account transfer, etc. (localized).</param>
        /// <param name="valueDate">Value date of the transaction, used for interest calculation.</param>
        public DebitTransaction(decimal? amount = default(decimal?), decimal? balanceAfterTransaction = default(decimal?), DateTime? bookingDate = default(DateTime?), string cardNumber = default(string), string counterpartyAccount = default(string), string counterpartyName = default(string), CurrencyEnum currency = default(CurrencyEnum), decimal? currencyRate = default(decimal?), string message = default(string), string narrative = default(string), OriginalCurrencyEnum? originalCurrency = default(OriginalCurrencyEnum?), decimal? originalCurrencyAmount = default(decimal?), string ownMessage = default(string), DateTime? paymentDate = default(DateTime?), string reference = default(string), StatusEnum status = default(StatusEnum), DateTime? transactionDate = default(DateTime?), string transactionId = default(string), string typeDescription = default(string), DateTime? valueDate = default(DateTime?)) : base()
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for DebitTransaction and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "bookingDate" is required (not null)
            if (bookingDate == null)
            {
                throw new InvalidDataException("bookingDate is a required property for DebitTransaction and cannot be null");
            }
            else
            {
                this.BookingDate = bookingDate;
            }
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new InvalidDataException("currency is a required property for DebitTransaction and cannot be null");
            }
            else
            {
                this.Currency = currency;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for DebitTransaction and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "transactionId" is required (not null)
            if (transactionId == null)
            {
                throw new InvalidDataException("transactionId is a required property for DebitTransaction and cannot be null");
            }
            else
            {
                this.TransactionId = transactionId;
            }
            this.BalanceAfterTransaction = balanceAfterTransaction;
            this.CardNumber = cardNumber;
            this.CounterpartyAccount = counterpartyAccount;
            this.CounterpartyName = counterpartyName;
            this.CurrencyRate = currencyRate;
            this.Message = message;
            this.Narrative = narrative;
            this.OriginalCurrency = originalCurrency;
            this.OriginalCurrencyAmount = originalCurrencyAmount;
            this.OwnMessage = ownMessage;
            this.PaymentDate = paymentDate;
            this.Reference = reference;
            this.TransactionDate = transactionDate;
            this.TypeDescription = typeDescription;
            this.ValueDate = valueDate;
        }
        
        /// <summary>
        /// Transaction value
        /// </summary>
        /// <value>Transaction value</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Balance after transaction
        /// </summary>
        /// <value>Balance after transaction</value>
        [DataMember(Name="balance_after_transaction", EmitDefaultValue=false)]
        public decimal? BalanceAfterTransaction { get; set; }

        /// <summary>
        /// Date transaction was booked to the account ledger
        /// </summary>
        /// <value>Date transaction was booked to the account ledger</value>
        [DataMember(Name="booking_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BookingDate { get; set; }

        /// <summary>
        /// 4 digits of card number of the transaction
        /// </summary>
        /// <value>4 digits of card number of the transaction</value>
        [DataMember(Name="card_number", EmitDefaultValue=false)]
        public string CardNumber { get; set; }

        /// <summary>
        /// Counterparty account details
        /// </summary>
        /// <value>Counterparty account details</value>
        [DataMember(Name="counterparty_account", EmitDefaultValue=false)]
        public string CounterpartyAccount { get; set; }

        /// <summary>
        /// Counterparty name
        /// </summary>
        /// <value>Counterparty name</value>
        [DataMember(Name="counterparty_name", EmitDefaultValue=false)]
        public string CounterpartyName { get; set; }


        /// <summary>
        /// Currency code according to ISO 4217
        /// </summary>
        /// <value>Currency code according to ISO 4217</value>
        [DataMember(Name="currency_rate", EmitDefaultValue=false)]
        public decimal? CurrencyRate { get; set; }

        /// <summary>
        /// Message from remitter to beneficiary. In Finland this may alternatively include a short description of the transaction e.g. &#39;Automaattiotto&#39;
        /// </summary>
        /// <value>Message from remitter to beneficiary. In Finland this may alternatively include a short description of the transaction e.g. &#39;Automaattiotto&#39;</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Transaction narrative (customer custom message)
        /// </summary>
        /// <value>Transaction narrative (customer custom message)</value>
        [DataMember(Name="narrative", EmitDefaultValue=false)]
        public string Narrative { get; set; }


        /// <summary>
        /// Foreign transaction amount in original currency
        /// </summary>
        /// <value>Foreign transaction amount in original currency</value>
        [DataMember(Name="original_currency_amount", EmitDefaultValue=false)]
        public decimal? OriginalCurrencyAmount { get; set; }

        /// <summary>
        /// Text message for the account holder&#39;s own use
        /// </summary>
        /// <value>Text message for the account holder&#39;s own use</value>
        [DataMember(Name="own_message", EmitDefaultValue=false)]
        public string OwnMessage { get; set; }

        /// <summary>
        /// Payment date of the transaction
        /// </summary>
        /// <value>Payment date of the transaction</value>
        [DataMember(Name="payment_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? PaymentDate { get; set; }

        /// <summary>
        /// Reference number
        /// </summary>
        /// <value>Reference number</value>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }


        /// <summary>
        /// Date on which transaction was enacted
        /// </summary>
        /// <value>Date on which transaction was enacted</value>
        [DataMember(Name="transaction_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? TransactionDate { get; set; }

        /// <summary>
        /// Unique transaction identifier as defined by the bank
        /// </summary>
        /// <value>Unique transaction identifier as defined by the bank</value>
        [DataMember(Name="transaction_id", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Description of the type of transaction, e.g. Cash withdrawal, Account transfer, etc. (localized)
        /// </summary>
        /// <value>Description of the type of transaction, e.g. Cash withdrawal, Account transfer, etc. (localized)</value>
        [DataMember(Name="type_description", EmitDefaultValue=false)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// Value date of the transaction, used for interest calculation
        /// </summary>
        /// <value>Value date of the transaction, used for interest calculation</value>
        [DataMember(Name="value_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ValueDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DebitTransaction {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BalanceAfterTransaction: ").Append(BalanceAfterTransaction).Append("\n");
            sb.Append("  BookingDate: ").Append(BookingDate).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  CounterpartyAccount: ").Append(CounterpartyAccount).Append("\n");
            sb.Append("  CounterpartyName: ").Append(CounterpartyName).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CurrencyRate: ").Append(CurrencyRate).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Narrative: ").Append(Narrative).Append("\n");
            sb.Append("  OriginalCurrency: ").Append(OriginalCurrency).Append("\n");
            sb.Append("  OriginalCurrencyAmount: ").Append(OriginalCurrencyAmount).Append("\n");
            sb.Append("  OwnMessage: ").Append(OwnMessage).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  TypeDescription: ").Append(TypeDescription).Append("\n");
            sb.Append("  ValueDate: ").Append(ValueDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DebitTransaction);
        }

        /// <summary>
        /// Returns true if DebitTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of DebitTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebitTransaction input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && base.Equals(input) && 
                (
                    this.BalanceAfterTransaction == input.BalanceAfterTransaction ||
                    (this.BalanceAfterTransaction != null &&
                    this.BalanceAfterTransaction.Equals(input.BalanceAfterTransaction))
                ) && base.Equals(input) && 
                (
                    this.BookingDate == input.BookingDate ||
                    (this.BookingDate != null &&
                    this.BookingDate.Equals(input.BookingDate))
                ) && base.Equals(input) && 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && base.Equals(input) && 
                (
                    this.CounterpartyAccount == input.CounterpartyAccount ||
                    (this.CounterpartyAccount != null &&
                    this.CounterpartyAccount.Equals(input.CounterpartyAccount))
                ) && base.Equals(input) && 
                (
                    this.CounterpartyName == input.CounterpartyName ||
                    (this.CounterpartyName != null &&
                    this.CounterpartyName.Equals(input.CounterpartyName))
                ) && base.Equals(input) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && base.Equals(input) && 
                (
                    this.CurrencyRate == input.CurrencyRate ||
                    (this.CurrencyRate != null &&
                    this.CurrencyRate.Equals(input.CurrencyRate))
                ) && base.Equals(input) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && base.Equals(input) && 
                (
                    this.Narrative == input.Narrative ||
                    (this.Narrative != null &&
                    this.Narrative.Equals(input.Narrative))
                ) && base.Equals(input) && 
                (
                    this.OriginalCurrency == input.OriginalCurrency ||
                    (this.OriginalCurrency != null &&
                    this.OriginalCurrency.Equals(input.OriginalCurrency))
                ) && base.Equals(input) && 
                (
                    this.OriginalCurrencyAmount == input.OriginalCurrencyAmount ||
                    (this.OriginalCurrencyAmount != null &&
                    this.OriginalCurrencyAmount.Equals(input.OriginalCurrencyAmount))
                ) && base.Equals(input) && 
                (
                    this.OwnMessage == input.OwnMessage ||
                    (this.OwnMessage != null &&
                    this.OwnMessage.Equals(input.OwnMessage))
                ) && base.Equals(input) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && base.Equals(input) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && base.Equals(input) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && base.Equals(input) && 
                (
                    this.TypeDescription == input.TypeDescription ||
                    (this.TypeDescription != null &&
                    this.TypeDescription.Equals(input.TypeDescription))
                ) && base.Equals(input) && 
                (
                    this.ValueDate == input.ValueDate ||
                    (this.ValueDate != null &&
                    this.ValueDate.Equals(input.ValueDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.BalanceAfterTransaction != null)
                    hashCode = hashCode * 59 + this.BalanceAfterTransaction.GetHashCode();
                if (this.BookingDate != null)
                    hashCode = hashCode * 59 + this.BookingDate.GetHashCode();
                if (this.CardNumber != null)
                    hashCode = hashCode * 59 + this.CardNumber.GetHashCode();
                if (this.CounterpartyAccount != null)
                    hashCode = hashCode * 59 + this.CounterpartyAccount.GetHashCode();
                if (this.CounterpartyName != null)
                    hashCode = hashCode * 59 + this.CounterpartyName.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.CurrencyRate != null)
                    hashCode = hashCode * 59 + this.CurrencyRate.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Narrative != null)
                    hashCode = hashCode * 59 + this.Narrative.GetHashCode();
                if (this.OriginalCurrency != null)
                    hashCode = hashCode * 59 + this.OriginalCurrency.GetHashCode();
                if (this.OriginalCurrencyAmount != null)
                    hashCode = hashCode * 59 + this.OriginalCurrencyAmount.GetHashCode();
                if (this.OwnMessage != null)
                    hashCode = hashCode * 59 + this.OwnMessage.GetHashCode();
                if (this.PaymentDate != null)
                    hashCode = hashCode * 59 + this.PaymentDate.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.TypeDescription != null)
                    hashCode = hashCode * 59 + this.TypeDescription.GetHashCode();
                if (this.ValueDate != null)
                    hashCode = hashCode * 59 + this.ValueDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}

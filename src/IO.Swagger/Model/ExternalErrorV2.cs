/* 
 * Nordea Account Information Services API v3
 *
 * Open Banking API
 *
 * OpenAPI spec version: 2.2.0-SNAPSHOT
 * Contact: support@nordeaopenbanking.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExternalErrorV2
    /// </summary>
    [DataContract]
    public partial class ExternalErrorV2 :  IEquatable<ExternalErrorV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalErrorV2" /> class.
        /// </summary>
        /// <param name="httpCode">HTTP error for response.</param>
        /// <param name="request">Error details.</param>
        /// <param name="failures">More details on the occurred error.</param>
        public ExternalErrorV2(int? httpCode = default(int?), ExternalRequestEchoV2 request = default(ExternalRequestEchoV2), List<ExternalFailure> failures = default(List<ExternalFailure>))
        {
            this.HttpCode = httpCode;
            this.Request = request;
            this.Failures = failures;
        }
        
        /// <summary>
        /// HTTP error for response
        /// </summary>
        /// <value>HTTP error for response</value>
        [DataMember(Name="httpCode", EmitDefaultValue=false)]
        public int? HttpCode { get; set; }

        /// <summary>
        /// Error details
        /// </summary>
        /// <value>Error details</value>
        [DataMember(Name="request", EmitDefaultValue=false)]
        public ExternalRequestEchoV2 Request { get; set; }

        /// <summary>
        /// More details on the occurred error
        /// </summary>
        /// <value>More details on the occurred error</value>
        [DataMember(Name="failures", EmitDefaultValue=false)]
        public List<ExternalFailure> Failures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalErrorV2 {\n");
            sb.Append("  HttpCode: ").Append(HttpCode).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  Failures: ").Append(Failures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalErrorV2);
        }

        /// <summary>
        /// Returns true if ExternalErrorV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalErrorV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalErrorV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HttpCode == input.HttpCode ||
                    (this.HttpCode != null &&
                    this.HttpCode.Equals(input.HttpCode))
                ) && 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                ) && 
                (
                    this.Failures == input.Failures ||
                    this.Failures != null &&
                    this.Failures.SequenceEqual(input.Failures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpCode != null)
                    hashCode = hashCode * 59 + this.HttpCode.GetHashCode();
                if (this.Request != null)
                    hashCode = hashCode * 59 + this.Request.GetHashCode();
                if (this.Failures != null)
                    hashCode = hashCode * 59 + this.Failures.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

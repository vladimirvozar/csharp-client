/* 
 * Nordea Account Information Services API v3
 *
 * Open Banking API
 *
 * OpenAPI spec version: 2.2.0-SNAPSHOT
 * Contact: support@nordeaopenbanking.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsV3Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get account details by account id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <returns>AccountDetailsResponse</returns>
        AccountDetailsResponse AccountDetailsUsingGET1 (string id);

        /// <summary>
        /// Get account details by account id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <returns>ApiResponse of AccountDetailsResponse</returns>
        ApiResponse<AccountDetailsResponse> AccountDetailsUsingGET1WithHttpInfo (string id);
        /// <summary>
        /// Get list of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountListResponse</returns>
        AccountListResponse AccountListUsingGET1 ();

        /// <summary>
        /// Get list of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountListResponse</returns>
        ApiResponse<AccountListResponse> AccountListUsingGET1WithHttpInfo ();
        /// <summary>
        /// Get account transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <param name="continuationKey">Key to subsequent page of transaction history (optional)</param>
        /// <param name="fromDate">List transactions starting from and including this date (optional)</param>
        /// <param name="language">Preferred language for textual values (optional)</param>
        /// <param name="toDate">List transactions until and including this date (optional)</param>
        /// <returns>TransactionListResponse</returns>
        TransactionListResponse TransactionListUsingGET1 (string id, string continuationKey = null, DateTime? fromDate = null, string language = null, DateTime? toDate = null);

        /// <summary>
        /// Get account transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <param name="continuationKey">Key to subsequent page of transaction history (optional)</param>
        /// <param name="fromDate">List transactions starting from and including this date (optional)</param>
        /// <param name="language">Preferred language for textual values (optional)</param>
        /// <param name="toDate">List transactions until and including this date (optional)</param>
        /// <returns>ApiResponse of TransactionListResponse</returns>
        ApiResponse<TransactionListResponse> TransactionListUsingGET1WithHttpInfo (string id, string continuationKey = null, DateTime? fromDate = null, string language = null, DateTime? toDate = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get account details by account id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <returns>Task of AccountDetailsResponse</returns>
        System.Threading.Tasks.Task<AccountDetailsResponse> AccountDetailsUsingGET1Async (string id);

        /// <summary>
        /// Get account details by account id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <returns>Task of ApiResponse (AccountDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountDetailsResponse>> AccountDetailsUsingGET1AsyncWithHttpInfo (string id);
        /// <summary>
        /// Get list of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccountListResponse</returns>
        System.Threading.Tasks.Task<AccountListResponse> AccountListUsingGET1Async ();

        /// <summary>
        /// Get list of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccountListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountListResponse>> AccountListUsingGET1AsyncWithHttpInfo ();
        /// <summary>
        /// Get account transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <param name="continuationKey">Key to subsequent page of transaction history (optional)</param>
        /// <param name="fromDate">List transactions starting from and including this date (optional)</param>
        /// <param name="language">Preferred language for textual values (optional)</param>
        /// <param name="toDate">List transactions until and including this date (optional)</param>
        /// <returns>Task of TransactionListResponse</returns>
        System.Threading.Tasks.Task<TransactionListResponse> TransactionListUsingGET1Async (string id, string continuationKey = null, DateTime? fromDate = null, string language = null, DateTime? toDate = null);

        /// <summary>
        /// Get account transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <param name="continuationKey">Key to subsequent page of transaction history (optional)</param>
        /// <param name="fromDate">List transactions starting from and including this date (optional)</param>
        /// <param name="language">Preferred language for textual values (optional)</param>
        /// <param name="toDate">List transactions until and including this date (optional)</param>
        /// <returns>Task of ApiResponse (TransactionListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionListResponse>> TransactionListUsingGET1AsyncWithHttpInfo (string id, string continuationKey = null, DateTime? fromDate = null, string language = null, DateTime? toDate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountsV3Api : IAccountsV3Api
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsV3Api"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountsV3Api(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsV3Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountsV3Api(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get account details by account id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <returns>AccountDetailsResponse</returns>
        public AccountDetailsResponse AccountDetailsUsingGET1 (string id)
        {
             ApiResponse<AccountDetailsResponse> localVarResponse = AccountDetailsUsingGET1WithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account details by account id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <returns>ApiResponse of AccountDetailsResponse</returns>
        public ApiResponse< AccountDetailsResponse > AccountDetailsUsingGET1WithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsV3Api->AccountDetailsUsingGET1");

            var localVarPath = "/v3/accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (clientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // authentication (client secret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Secret")))
            {
                localVarHeaderParams["X-IBM-Client-Secret"] = this.Configuration.ApiKey["X-IBM-Client-Secret"];
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountDetailsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountDetailsResponse)));
        }

        /// <summary>
        /// Get account details by account id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <returns>Task of AccountDetailsResponse</returns>
        public async System.Threading.Tasks.Task<AccountDetailsResponse> AccountDetailsUsingGET1Async (string id)
        {
             ApiResponse<AccountDetailsResponse> localVarResponse = await AccountDetailsUsingGET1AsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account details by account id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <returns>Task of ApiResponse (AccountDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountDetailsResponse>> AccountDetailsUsingGET1AsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsV3Api->AccountDetailsUsingGET1");

            var localVarPath = "/v3/accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (clientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountDetailsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountDetailsResponse)));
        }

        /// <summary>
        /// Get list of accounts 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountListResponse</returns>
        public AccountListResponse AccountListUsingGET1 ()
        {
             ApiResponse<AccountListResponse> localVarResponse = AccountListUsingGET1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of accounts 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountListResponse</returns>
        public ApiResponse< AccountListResponse > AccountListUsingGET1WithHttpInfo ()
        {

            var localVarPath = "/v3/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (clientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // authentication (client secret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Secret")))
            {
                localVarHeaderParams["X-IBM-Client-Secret"] = this.Configuration.ApiKey["X-IBM-Client-Secret"];
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountListUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountListResponse)));
        }

        /// <summary>
        /// Get list of accounts 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccountListResponse</returns>
        public async System.Threading.Tasks.Task<AccountListResponse> AccountListUsingGET1Async ()
        {
             ApiResponse<AccountListResponse> localVarResponse = await AccountListUsingGET1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of accounts 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccountListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountListResponse>> AccountListUsingGET1AsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (clientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountListUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountListResponse)));
        }

        /// <summary>
        /// Get account transactions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <param name="continuationKey">Key to subsequent page of transaction history (optional)</param>
        /// <param name="fromDate">List transactions starting from and including this date (optional)</param>
        /// <param name="language">Preferred language for textual values (optional)</param>
        /// <param name="toDate">List transactions until and including this date (optional)</param>
        /// <returns>TransactionListResponse</returns>
        public TransactionListResponse TransactionListUsingGET1 (string id, string continuationKey = null, DateTime? fromDate = null, string language = null, DateTime? toDate = null)
        {
             ApiResponse<TransactionListResponse> localVarResponse = TransactionListUsingGET1WithHttpInfo(id, continuationKey, fromDate, language, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account transactions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <param name="continuationKey">Key to subsequent page of transaction history (optional)</param>
        /// <param name="fromDate">List transactions starting from and including this date (optional)</param>
        /// <param name="language">Preferred language for textual values (optional)</param>
        /// <param name="toDate">List transactions until and including this date (optional)</param>
        /// <returns>ApiResponse of TransactionListResponse</returns>
        public ApiResponse< TransactionListResponse > TransactionListUsingGET1WithHttpInfo (string id, string continuationKey = null, DateTime? fromDate = null, string language = null, DateTime? toDate = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsV3Api->TransactionListUsingGET1");

            var localVarPath = "/v3/accounts/{id}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (continuationKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "continuationKey", continuationKey)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // authentication (clientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionListUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionListResponse)));
        }

        /// <summary>
        /// Get account transactions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <param name="continuationKey">Key to subsequent page of transaction history (optional)</param>
        /// <param name="fromDate">List transactions starting from and including this date (optional)</param>
        /// <param name="language">Preferred language for textual values (optional)</param>
        /// <param name="toDate">List transactions until and including this date (optional)</param>
        /// <returns>Task of TransactionListResponse</returns>
        public async System.Threading.Tasks.Task<TransactionListResponse> TransactionListUsingGET1Async (string id, string continuationKey = null, DateTime? fromDate = null, string language = null, DateTime? toDate = null)
        {
             ApiResponse<TransactionListResponse> localVarResponse = await TransactionListUsingGET1AsyncWithHttpInfo(id, continuationKey, fromDate, language, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account transactions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Internal, technical account identifier</param>
        /// <param name="continuationKey">Key to subsequent page of transaction history (optional)</param>
        /// <param name="fromDate">List transactions starting from and including this date (optional)</param>
        /// <param name="language">Preferred language for textual values (optional)</param>
        /// <param name="toDate">List transactions until and including this date (optional)</param>
        /// <returns>Task of ApiResponse (TransactionListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionListResponse>> TransactionListUsingGET1AsyncWithHttpInfo (string id, string continuationKey = null, DateTime? fromDate = null, string language = null, DateTime? toDate = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsV3Api->TransactionListUsingGET1");

            var localVarPath = "/v3/accounts/{id}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (continuationKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "continuationKey", continuationKey)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // authentication (clientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionListUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionListResponse)));
        }

    }
}
